// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package fast_transfer_gateway

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// FastTransferOrder is an auto generated low-level Go binding around an user-defined struct.
type FastTransferOrder struct {
	Sender            [32]byte
	Recipient         [32]byte
	AmountIn          *big.Int
	AmountOut         *big.Int
	Nonce             *big.Int
	SourceDomain      uint32
	DestinationDomain uint32
	TimeoutTimestamp  *big.Int
	Data              []byte
}

// FastTransferGatewayMetaData contains all meta data concerning the FastTransferGateway contract.
var FastTransferGatewayMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"}],\"name\":\"OrderAlreadySettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"}],\"name\":\"OrderRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"}],\"name\":\"OrderSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"order\",\"type\":\"bytes\"}],\"name\":\"OrderSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERMIT2\",\"outputs\":[{\"internalType\":\"contractIPermit2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"sourceDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timeoutTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structFastTransferOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"fillOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_localDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mailbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_permit2\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"repaymentAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"orderIDs\",\"type\":\"bytes\"}],\"name\":\"initiateSettlement\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"sourceDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timeoutTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structFastTransferOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"initiateTimeout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"filler\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"sourceDomain\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderStatuses\",\"outputs\":[{\"internalType\":\"enumOrderStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sourceDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"repaymentAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"orderIDs\",\"type\":\"bytes\"}],\"name\":\"quoteInitiateSettlement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sourceDomain\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"sourceDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timeoutTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structFastTransferOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"quoteInitiateTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"remoteDomains\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"remoteContract\",\"type\":\"bytes32\"}],\"name\":\"setRemoteDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"settlementDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timeoutTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timeoutTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permitDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"submitOrderWithPermit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250348015610042575f5ffd5b5061005161005660201b60201c565b6101b6565b5f61006561015460201b60201c565b9050805f0160089054906101000a900460ff16156100af576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff8016815f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff16146101515767ffffffffffffffff815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff604051610148919061019d565b60405180910390a15b50565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f67ffffffffffffffff82169050919050565b6101978161017b565b82525050565b5f6020820190506101b05f83018461018e565b92915050565b608051614eec6101dc5f395f8181612097015281816120ec01526122a60152614eec5ff3fe608060405260043610610165575f3560e01c80638da5cb5b116100d0578063e88787c211610089578063f2c2092411610063578063f2c209241461050c578063f2fde38b14610534578063f7213db61461055c578063fc0c546a1461059a57610165565b8063e88787c214610458578063f13a89b414610494578063f23517ee146104d057610165565b80638da5cb5b1461036057806395d7325d1461038a578063ad3cb1cc146103b2578063affed0e0146103dc578063d5438eae14610406578063e5dc84961461043057610165565b806356d5d4751161012257806356d5d4751461025f5780636afdd8501461027b578063715018a6146102a55780637f665ee5146102bb57806385cf3f93146102f75780638d3638f41461033657610165565b806313d9c7f9146101695780631cabc26f146101855780631ea9e2e3146101c157806330c5b926146101fd5780634f1ef2861461021957806352d1902d14610235575b5f5ffd5b610183600480360381019061017e91906135c7565b6105c4565b005b348015610190575f5ffd5b506101ab60048036038101906101a6919061360e565b6108a6565b6040516101b89190613677565b60405180910390f35b3480156101cc575f5ffd5b506101e760048036038101906101e29190613690565b610a4f565b6040516101f491906136ca565b60405180910390f35b610217600480360381019061021291906136e3565b610a64565b005b610233600480360381019061022e9190613797565b610cb9565b005b348015610240575f5ffd5b50610249610cd8565b60405161025691906136ca565b60405180910390f35b6102796004803603810190610274919061384a565b610d09565b005b348015610286575f5ffd5b5061028f610ff2565b60405161029c9190613916565b60405180910390f35b3480156102b0575f5ffd5b506102b9611016565b005b3480156102c6575f5ffd5b506102e160048036038101906102dc919061392f565b611029565b6040516102ee91906139cd565b60405180910390f35b348015610302575f5ffd5b5061031d6004803603810190610318919061392f565b611046565b60405161032d94939291906139f5565b60405180910390f35b348015610341575f5ffd5b5061034a611081565b6040516103579190613a38565b60405180910390f35b34801561036b575f5ffd5b50610374611097565b6040516103819190613a60565b60405180910390f35b348015610395575f5ffd5b506103b060048036038101906103ab9190613a79565b6110cc565b005b3480156103bd575f5ffd5b506103c661151f565b6040516103d39190613b33565b60405180910390f35b3480156103e7575f5ffd5b506103f0611558565b6040516103fd9190613a38565b60405180910390f35b348015610411575f5ffd5b5061041a61156d565b6040516104279190613a60565b60405180910390f35b34801561043b575f5ffd5b5061045660048036038101906104519190613b53565b611592565b005b348015610463575f5ffd5b5061047e60048036038101906104799190613b91565b6115c0565b60405161048b9190613677565b60405180910390f35b34801561049f575f5ffd5b506104ba60048036038101906104b59190613bfd565b611707565b6040516104c791906136ca565b60405180910390f35b3480156104db575f5ffd5b506104f660048036038101906104f19190613cba565b61197d565b60405161050391906136ca565b60405180910390f35b348015610517575f5ffd5b50610532600480360381019061052d9190613dbf565b611bda565b005b34801561053f575f5ffd5b5061055a60048036038101906105559190613e36565b611e60565b005b348015610567575f5ffd5b50610582600480360381019061057d919061392f565b611ee4565b60405161059193929190613e61565b60405180910390f35b3480156105a5575f5ffd5b506105ae611f39565b6040516105bb9190613a60565b60405180910390f35b60605f5f5f90505b8351811015610761575f8482815181106105e9576105e8613e96565b5b602002602001015190505f6105fd82611f5e565b90505f60065f8381526020019081526020015f205f9054906101000a900460ff169050428360e0015110610666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065d90613f33565b60405180910390fd5b5f60028111156106795761067861395a565b5b81600281111561068c5761068b61395a565b5b146106cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c390613fc1565b60405180910390fd5b5f8414610726578463ffffffff168360a0015163ffffffff1614610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071c9061404f565b60405180910390fd5b5b85826040516020016107399291906140d1565b60405160208183030381529060405295508260a00151945050505080806001019150506105cc565b505f60035f8363ffffffff1663ffffffff1681526020019081526020015f205490505f5f1b81036107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be90614168565b60405180910390fd5b5f6001808111156107db576107da61395a565b5b846040516020016107ed9291906141c6565b604051602081830303815290604052905060025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa31de01348585856040518563ffffffff1660e01b815260040161085d93929190614235565b60206040518083038185885af1158015610879573d5f5f3e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061089e9190614285565b505050505050565b5f5f60035f8563ffffffff1663ffffffff1681526020019081526020015f205490505f5f1b810361090c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090390614168565b60405180910390fd5b60605f5f90505b845181101561096f578161094086838151811061093357610932613e96565b5b6020026020010151611f5e565b6040516020016109519291906140d1565b60405160208183030381529060405291508080600101915050610913565b505f6001808111156109845761098361395a565b5b826040516020016109969291906141c6565b604051602081830303815290604052905060025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c42bd188785846040518463ffffffff1660e01b8152600401610a0593929190614235565b602060405180830381865afa158015610a20573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a4491906142c4565b935050505092915050565b6003602052805f5260405f205f915090505481565b5f5f5f90505b8251811015610b72575f8160200184015190505f610a8782611f6f565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af29061435f565b60405180910390fd5b5f8314610b55578363ffffffff16816040015163ffffffff1614610b54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4b9061404f565b60405180910390fd5b5b806040015193505050602081610b6b91906143aa565b9050610a6a565b505f60035f8363ffffffff1663ffffffff1681526020019081526020015f205490505f5f1b8103610bd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcf90614168565b60405180910390fd5b5f5f6001811115610bec57610beb61395a565b5b8585604051602001610c00939291906143dd565b604051602081830303815290604052905060025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa31de01348585856040518563ffffffff1660e01b8152600401610c7093929190614235565b60206040518083038185885af1158015610c8c573d5f5f3e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610cb19190614285565b505050505050565b610cc1612095565b610cca8261217b565b610cd48282612186565b5050565b5f610ce16122a4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8f90614485565b60405180910390fd5b5f60035f8663ffffffff1663ffffffff1681526020019081526020015f205490505f5f1b8103610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df490614513565b60405180910390fd5b808414610e3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e36906145a1565b60405180910390fd5b5f83835f818110610e5357610e52613e96565b5b9050013560f81c60f81b60f81c60ff166001811115610e7557610e7461395a565b5b90505f6001811115610e8a57610e8961395a565b5b816001811115610e9d57610e9c61395a565b5b03610f5557365f85856001908092610eb7939291906145c7565b915091505f82825f90602092610ecf939291906145c7565b90610eda9190614617565b90505f83836020908092610ef0939291906145c7565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505090505f610f3e8361232b565b9050610f4b81838d612336565b5050505050610fea565b600180811115610f6857610f6761395a565b5b816001811115610f7b57610f7a61395a565b5b03610fe957365f85856001908092610f95939291906145c7565b91509150610fe682828080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505089612606565b50505b5b505050505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61101e612642565b6110275f6126c9565b565b6006602052805f5260405f205f915054906101000a900460ff1681565b6005602052805f5260405f205f91509050805f015490806001015490806002015f9054906101000a900463ffffffff16908060030154905084565b600260149054906101000a900463ffffffff1681565b5f5f6110a161279a565b9050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6110d46127c1565b428160e001511161111a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611111906146e5565b60405180910390fd5b5f5f1b60035f8360a0015163ffffffff1663ffffffff1681526020019081526020015f20540361117f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117690614773565b60405180910390fd5b600260149054906101000a900463ffffffff1663ffffffff168160c0015163ffffffff16146111e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111da90614801565b60405180910390fd5b5f6111ed82611f5e565b90505f60028111156112025761120161395a565b5b60065f8381526020019081526020015f205f9054906101000a900460ff1660028111156112325761123161395a565b5b14611272576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112699061488f565b60405180910390fd5b5f611280836020015161232b565b9050600160065f8481526020019081526020015f205f6101000a81548160ff021916908360028111156112b6576112b561395a565b5b021790555060405180606001604052808381526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018460a0015163ffffffff1681525060075f8481526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548163ffffffff021916908363ffffffff1602179055509050505f8361010001515111156114df576113be60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633308660600151612815565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b38285606001516040518363ffffffff1660e01b815260040161141e9291906148ad565b6020604051808303815f875af115801561143a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061145e9190614909565b505f8173ffffffffffffffffffffffffffffffffffffffff1684610100015160405161148a9190614934565b5f604051808303815f865af19150503d805f81146114c3576040519150601f19603f3d011682016040523d82523d5f602084013e6114c8565b606091505b50509050806114d9573d5f5f3e3d5ffd5b50611511565b61151060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633838660600151612815565b5b505061151b612897565b5050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b60045f9054906101000a900463ffffffff1681565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61159a612642565b8060035f8463ffffffff1663ffffffff1681526020019081526020015f20819055505050565b5f5f60035f8663ffffffff1663ffffffff1681526020019081526020015f205490505f5f1b8103611626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161d90614168565b60405180910390fd5b5f5f600181111561163a5761163961395a565b5b858560405160200161164e939291906143dd565b604051602081830303815290604052905060025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c42bd188784846040518463ffffffff1660e01b81526004016116bd93929190614235565b602060405180830381865afa1580156116d8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116fc91906142c4565b925050509392505050565b5f5f6040518061012001604052808b81526020018a815260200189815260200188815260200160045f9054906101000a900463ffffffff1663ffffffff168152602001600260149054906101000a900463ffffffff1663ffffffff1681526020018763ffffffff16815260200186815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525090505f6117cd82611f5e565b90505f5f1b60035f8963ffffffff1663ffffffff1681526020019081526020015f205403611830576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611827906149ba565b60405180910390fd5b600160045f8282829054906101000a900463ffffffff1661185191906149d8565b92506101000a81548163ffffffff021916908363ffffffff1602179055506040518060800160405280835f01518152602001836080015181526020018360c0015163ffffffff168152602001836040015181525060055f8381526020019081526020015f205f820151815f0155602082015181600101556040820151816002015f6101000a81548163ffffffff021916908363ffffffff16021790555060608201518160030155905050807f59f858504f8d8ad967dd7453df850e265270474e364b7e2fbd3333e06efdbfc0611926846128ae565b6040516119339190614a0f565b60405180910390a261196c60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633308560400151612815565b809250505098975050505050505050565b5f5f6040518061012001604052808e81526020018d81526020018c81526020018b815260200160045f9054906101000a900463ffffffff1663ffffffff168152602001600260149054906101000a900463ffffffff1663ffffffff1681526020018a63ffffffff16815260200189815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525090505f611a4382611f5e565b90505f5f1b60035f8c63ffffffff1663ffffffff1681526020019081526020015f205403611aa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9d906149ba565b60405180910390fd5b600160045f8282829054906101000a900463ffffffff16611ac791906149d8565b92506101000a81548163ffffffff021916908363ffffffff1602179055506040518060800160405280835f01518152602001836080015181526020018360c0015163ffffffff168152602001836040015181525060055f8381526020019081526020015f205f820151815f0155602082015181600101556040820151816002015f6101000a81548163ffffffff021916908363ffffffff16021790555060608201518160030155905050807f59f858504f8d8ad967dd7453df850e265270474e364b7e2fbd3333e06efdbfc0611b9c846128ae565b604051611ba99190614a0f565b60405180910390a2611bc68260400151898460800151888861290b565b80925050509b9a5050505050505050505050565b5f611be3612a2f565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f5f8267ffffffffffffffff16148015611c2b5750825b90505f60018367ffffffffffffffff16148015611c5e57505f3073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611c6c575080155b15611ca3576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315611cf0576001855f0160086101000a81548160ff0219169083151502179055505b611cf989612a56565b8760015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089600260146101000a81548163ffffffff021916908363ffffffff160217905550855f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160045f6101000a81548163ffffffff021916908363ffffffff1602179055508315611e54575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051611e4b9190614a7b565b60405180910390a15b50505050505050505050565b611e68612642565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ed8575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611ecf9190613a60565b60405180910390fd5b611ee1816126c9565b50565b6007602052805f5260405f205f91509050805f015490806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900463ffffffff16905083565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f611f6882612a6a565b9050919050565b611f776131be565b5f60075f8481526020019081526020015f206040518060600160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090505f73ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff160361208c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208390614b04565b60405180910390fd5b80915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148061214257507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612129612a82565b73ffffffffffffffffffffffffffffffffffffffff1614155b15612179576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612183612642565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156121ee57506040513d601f19601f820116820180604052508101906121eb9190614285565b60015b61222f57816040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016122269190613a60565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b811461229557806040517faa1d49a400000000000000000000000000000000000000000000000000000000815260040161228c91906136ca565b60405180910390fd5b61229f8383612ad5565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614612329576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f815f1c9050919050565b5f5f90505f5f90505b83518110156124c3575f8160200185015190505f60055f8381526020019081526020015f206040518060800160405290815f820154815260200160018201548152602001600282015f9054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160038201548152505090505f60028111156123c6576123c561395a565b5b60065f8481526020019081526020015f205f9054906101000a900460ff1660028111156123f6576123f561395a565b5b146124025750506124af565b5f816020015111612448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243f90614b92565b60405180910390fd5b8463ffffffff16816040015163ffffffff161461249a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249190614c20565b60405180910390fd5b8060600151846124aa91906143aa565b935050505b6020816124bc91906143aa565b905061233f565b505f5f90505b83518110156125d3575f8160200185015190505f60028111156124ef576124ee61395a565b5b60065f8381526020019081526020015f205f9054906101000a900460ff16600281111561251f5761251e61395a565b5b1461255757807f0349d9fa752b33cd4d30f97058afcf8e7b9d5c3c7a20056699a8947fedf7313860405160405180910390a2506125bf565b600160065f8381526020019081526020015f205f6101000a81548160ff0219169083600281111561258b5761258a61395a565b5b0217905550807fd4250d6114a611e75d68b1c6f14c61e967863d8ac20bc8ebfa4e5f28f664736660405160405180910390a2505b6020816125cc91906143aa565b90506124c9565b5061260060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168583612b47565b50505050565b5f5f90505b825181101561263d575f8160200184015190506126288184612bc6565b5060208161263691906143aa565b905061260b565b505050565b61264a612db4565b73ffffffffffffffffffffffffffffffffffffffff16612668611097565b73ffffffffffffffffffffffffffffffffffffffff16146126c75761268b612db4565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016126be9190613a60565b60405180910390fd5b565b5f6126d261279a565b90505f815f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082825f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b5f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b5f6127ca612dbb565b90506002815f015403612809576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002815f018190555050565b612891848573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161284a93929190614c3e565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612de2565b50505050565b5f6128a0612dbb565b90506001815f018190555050565b6060815f015182602001518360400151846060015185608001518660a001518760c001518860e001518961010001516040516020016128f599989796959493929190614cc7565b6040516020818303038152906040529050919050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330f28b7a6040518060600160405280604051806040016040528060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a81525081526020018681526020018781525060405180604001604052803073ffffffffffffffffffffffffffffffffffffffff168152602001898152503386866040518663ffffffff1660e01b81526004016129fb959493929190614e69565b5f604051808303815f87803b158015612a12575f5ffd5b505af1158015612a24573d5f5f3e3d5ffd5b505050505050505050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b612a5e612e7d565b612a6781612ebd565b50565b5f612a74826128ae565b805190602001209050919050565b5f612aae7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b612f41565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612ade82612f4a565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a25f81511115612b3a57612b348282613013565b50612b43565b612b42613093565b5b5050565b612bc1838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612b7a9291906148ad565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612de2565b505050565b5f60055f8481526020019081526020015f206040518060800160405290815f820154815260200160018201548152602001600282015f9054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160038201548152505090505f816020015111612c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6490614b92565b60405180910390fd5b8163ffffffff16816040015163ffffffff1614612cbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb690614c20565b60405180910390fd5b5f6002811115612cd257612cd161395a565b5b60065f8581526020019081526020015f205f9054906101000a900460ff166002811115612d0257612d0161395a565b5b14612d0d5750612db0565b600260065f8581526020019081526020015f205f6101000a81548160ff02191690836002811115612d4157612d4061395a565b5b0217905550612d8160015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612d77835f015161232b565b8360600151612b47565b827fa60671d8537ed193e567f86ddf28cf35dc67073b5ad80a2d41359cfa78db0a1e60405160405180910390a2505b5050565b5f33905090565b5f7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00905090565b5f5f60205f8451602086015f885af180612e01576040513d5f823e3d81fd5b3d92505f519150505f8214612e1a576001811415612e35565b5f8473ffffffffffffffffffffffffffffffffffffffff163b145b15612e7757836040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401612e6e9190613a60565b60405180910390fd5b50505050565b612e856130cf565b612ebb576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b612ec5612e7d565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612f35575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612f2c9190613a60565b60405180910390fd5b612f3e816126c9565b50565b5f819050919050565b5f8173ffffffffffffffffffffffffffffffffffffffff163b03612fa557806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612f9c9190613a60565b60405180910390fd5b80612fd17f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b612f41565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60605f5f8473ffffffffffffffffffffffffffffffffffffffff168460405161303c9190614934565b5f60405180830381855af49150503d805f8114613074576040519150601f19603f3d011682016040523d82523d5f602084013e613079565b606091505b50915091506130898583836130ed565b9250505092915050565b5f3411156130cd576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f6130d8612a2f565b5f0160089054906101000a900460ff16905090565b606082613102576130fd8261317a565b613172565b5f825114801561312857505f8473ffffffffffffffffffffffffffffffffffffffff163b145b1561316a57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016131619190613a60565b60405180910390fd5b819050613173565b5b9392505050565b5f8151111561318c5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180606001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f63ffffffff1681525090565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6132538261320d565b810181811067ffffffffffffffff821117156132725761327161321d565b5b80604052505050565b5f6132846131f8565b9050613290828261324a565b919050565b5f67ffffffffffffffff8211156132af576132ae61321d565b5b602082029050602081019050919050565b5f5ffd5b5f5ffd5b5f5ffd5b5f819050919050565b6132de816132cc565b81146132e8575f5ffd5b50565b5f813590506132f9816132d5565b92915050565b5f819050919050565b613311816132ff565b811461331b575f5ffd5b50565b5f8135905061332c81613308565b92915050565b5f63ffffffff82169050919050565b61334a81613332565b8114613354575f5ffd5b50565b5f8135905061336581613341565b92915050565b5f5ffd5b5f67ffffffffffffffff8211156133895761338861321d565b5b6133928261320d565b9050602081019050919050565b828183375f83830152505050565b5f6133bf6133ba8461336f565b61327b565b9050828152602081018484840111156133db576133da61336b565b5b6133e684828561339f565b509392505050565b5f82601f83011261340257613401613209565b5b81356134128482602086016133ad565b91505092915050565b5f6101208284031215613431576134306132c4565b5b61343c61012061327b565b90505f61344b848285016132eb565b5f83015250602061345e848285016132eb565b60208301525060406134728482850161331e565b60408301525060606134868482850161331e565b606083015250608061349a8482850161331e565b60808301525060a06134ae84828501613357565b60a08301525060c06134c284828501613357565b60c08301525060e06134d68482850161331e565b60e08301525061010082013567ffffffffffffffff8111156134fb576134fa6132c8565b5b613507848285016133ee565b6101008301525092915050565b5f61352661352184613295565b61327b565b90508083825260208201905060208402830185811115613549576135486132c0565b5b835b8181101561359057803567ffffffffffffffff81111561356e5761356d613209565b5b80860161357b898261341b565b8552602085019450505060208101905061354b565b5050509392505050565b5f82601f8301126135ae576135ad613209565b5b81356135be848260208601613514565b91505092915050565b5f602082840312156135dc576135db613201565b5b5f82013567ffffffffffffffff8111156135f9576135f8613205565b5b6136058482850161359a565b91505092915050565b5f5f6040838503121561362457613623613201565b5b5f61363185828601613357565b925050602083013567ffffffffffffffff81111561365257613651613205565b5b61365e8582860161359a565b9150509250929050565b613671816132ff565b82525050565b5f60208201905061368a5f830184613668565b92915050565b5f602082840312156136a5576136a4613201565b5b5f6136b284828501613357565b91505092915050565b6136c4816132cc565b82525050565b5f6020820190506136dd5f8301846136bb565b92915050565b5f5f604083850312156136f9576136f8613201565b5b5f613706858286016132eb565b925050602083013567ffffffffffffffff81111561372757613726613205565b5b613733858286016133ee565b9150509250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6137668261373d565b9050919050565b6137768161375c565b8114613780575f5ffd5b50565b5f813590506137918161376d565b92915050565b5f5f604083850312156137ad576137ac613201565b5b5f6137ba85828601613783565b925050602083013567ffffffffffffffff8111156137db576137da613205565b5b6137e7858286016133ee565b9150509250929050565b5f5ffd5b5f5f83601f84011261380a57613809613209565b5b8235905067ffffffffffffffff811115613827576138266137f1565b5b602083019150836001820283011115613843576138426132c0565b5b9250929050565b5f5f5f5f6060858703121561386257613861613201565b5b5f61386f87828801613357565b9450506020613880878288016132eb565b935050604085013567ffffffffffffffff8111156138a1576138a0613205565b5b6138ad878288016137f5565b925092505092959194509250565b5f819050919050565b5f6138de6138d96138d48461373d565b6138bb565b61373d565b9050919050565b5f6138ef826138c4565b9050919050565b5f613900826138e5565b9050919050565b613910816138f6565b82525050565b5f6020820190506139295f830184613907565b92915050565b5f6020828403121561394457613943613201565b5b5f613951848285016132eb565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600381106139985761399761395a565b5b50565b5f8190506139a882613987565b919050565b5f6139b78261399b565b9050919050565b6139c7816139ad565b82525050565b5f6020820190506139e05f8301846139be565b92915050565b6139ef81613332565b82525050565b5f608082019050613a085f8301876136bb565b613a156020830186613668565b613a2260408301856139e6565b613a2f6060830184613668565b95945050505050565b5f602082019050613a4b5f8301846139e6565b92915050565b613a5a8161375c565b82525050565b5f602082019050613a735f830184613a51565b92915050565b5f5f60408385031215613a8f57613a8e613201565b5b5f613a9c85828601613783565b925050602083013567ffffffffffffffff811115613abd57613abc613205565b5b613ac98582860161341b565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f613b0582613ad3565b613b0f8185613add565b9350613b1f818560208601613aed565b613b288161320d565b840191505092915050565b5f6020820190508181035f830152613b4b8184613afb565b905092915050565b5f5f60408385031215613b6957613b68613201565b5b5f613b7685828601613357565b9250506020613b87858286016132eb565b9150509250929050565b5f5f5f60608486031215613ba857613ba7613201565b5b5f613bb586828701613357565b9350506020613bc6868287016132eb565b925050604084013567ffffffffffffffff811115613be757613be6613205565b5b613bf3868287016133ee565b9150509250925092565b5f5f5f5f5f5f5f5f60e0898b031215613c1957613c18613201565b5b5f613c268b828c016132eb565b9850506020613c378b828c016132eb565b9750506040613c488b828c0161331e565b9650506060613c598b828c0161331e565b9550506080613c6a8b828c01613357565b94505060a0613c7b8b828c0161331e565b93505060c089013567ffffffffffffffff811115613c9c57613c9b613205565b5b613ca88b828c016137f5565b92509250509295985092959890939650565b5f5f5f5f5f5f5f5f5f5f5f6101208c8e031215613cda57613cd9613201565b5b5f613ce78e828f016132eb565b9b50506020613cf88e828f016132eb565b9a50506040613d098e828f0161331e565b9950506060613d1a8e828f0161331e565b9850506080613d2b8e828f01613357565b97505060a0613d3c8e828f0161331e565b96505060c0613d4d8e828f0161331e565b95505060e08c013567ffffffffffffffff811115613d6e57613d6d613205565b5b613d7a8e828f016137f5565b94509450506101008c013567ffffffffffffffff811115613d9e57613d9d613205565b5b613daa8e828f016137f5565b92509250509295989b509295989b9093969950565b5f5f5f5f5f60a08688031215613dd857613dd7613201565b5b5f613de588828901613357565b9550506020613df688828901613783565b9450506040613e0788828901613783565b9350506060613e1888828901613783565b9250506080613e2988828901613783565b9150509295509295909350565b5f60208284031215613e4b57613e4a613201565b5b5f613e5884828501613783565b91505092915050565b5f606082019050613e745f8301866136bb565b613e816020830185613a51565b613e8e60408301846139e6565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f466173745472616e73666572476174657761793a206f72646572206e6f7420745f8201527f696d6564206f7574000000000000000000000000000000000000000000000000602082015250565b5f613f1d602883613add565b9150613f2882613ec3565b604082019050919050565b5f6020820190508181035f830152613f4a81613f11565b9050919050565b7f466173745472616e73666572476174657761793a206f726465722066696c6c655f8201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b5f613fab602183613add565b9150613fb682613f51565b604082019050919050565b5f6020820190508181035f830152613fd881613f9f565b9050919050565b7f466173745472616e73666572476174657761793a20536f7572636520646f6d615f8201527f696e73206d757374206d61746368000000000000000000000000000000000000602082015250565b5f614039602e83613add565b915061404482613fdf565b604082019050919050565b5f6020820190508181035f8301526140668161402d565b9050919050565b5f81519050919050565b5f81905092915050565b5f61408b8261406d565b6140958185614077565b93506140a5818560208601613aed565b80840191505092915050565b5f819050919050565b6140cb6140c6826132cc565b6140b1565b82525050565b5f6140dc8285614081565b91506140e882846140ba565b6020820191508190509392505050565b7f466173745472616e73666572476174657761793a20756e6b6e6f776e20736f755f8201527f72636520646f6d61696e00000000000000000000000000000000000000000000602082015250565b5f614152602a83613add565b915061415d826140f8565b604082019050919050565b5f6020820190508181035f83015261417f81614146565b9050919050565b5f60ff82169050919050565b5f8160f81b9050919050565b5f6141a882614192565b9050919050565b6141c06141bb82614186565b61419e565b82525050565b5f6141d182856141af565b6001820191506141e18284614081565b91508190509392505050565b5f82825260208201905092915050565b5f6142078261406d565b61421181856141ed565b9350614221818560208601613aed565b61422a8161320d565b840191505092915050565b5f6060820190506142485f8301866139e6565b61425560208301856136bb565b818103604083015261426781846141fd565b9050949350505050565b5f8151905061427f816132d5565b92915050565b5f6020828403121561429a57614299613201565b5b5f6142a784828501614271565b91505092915050565b5f815190506142be81613308565b92915050565b5f602082840312156142d9576142d8613201565b5b5f6142e6848285016142b0565b91505092915050565b7f466173745472616e73666572476174657761793a20556e617574686f72697a655f8201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b5f614349602183613add565b9150614354826142ef565b604082019050919050565b5f6020820190508181035f8301526143768161433d565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6143b4826132ff565b91506143bf836132ff565b92508282019050808211156143d7576143d661437d565b5b92915050565b5f6143e882866141af565b6001820191506143f882856140ba565b6020820191506144088284614081565b9150819050949350505050565b7f466173745472616e73666572476174657761793a2073656e646572206e6f74205f8201527f6d61696c626f7800000000000000000000000000000000000000000000000000602082015250565b5f61446f602783613add565b915061447a82614415565b604082019050919050565b5f6020820190508181035f83015261449c81614463565b9050919050565b7f466173745472616e73666572476174657761793a206f726967696e20646f6d615f8201527f696e206e6f7420666f756e640000000000000000000000000000000000000000602082015250565b5f6144fd602c83613add565b9150614508826144a3565b604082019050919050565b5f6020820190508181035f83015261452a816144f1565b9050919050565b7f466173745472616e73666572476174657761793a20696e76616c69642073656e5f8201527f6465720000000000000000000000000000000000000000000000000000000000602082015250565b5f61458b602383613add565b915061459682614531565b604082019050919050565b5f6020820190508181035f8301526145b88161457f565b9050919050565b5f5ffd5b5f5ffd5b5f5f858511156145da576145d96145bf565b5b838611156145eb576145ea6145c3565b5b6001850283019150848603905094509492505050565b5f82905092915050565b5f82821b905092915050565b5f6146228383614601565b8261462d81356132cc565b9250602082101561466d576146687fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080261460b565b831692505b505092915050565b7f466173745472616e73666572476174657761793a206f726465722065787069725f8201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b5f6146cf602283613add565b91506146da82614675565b604082019050919050565b5f6020820190508181035f8301526146fc816146c3565b9050919050565b7f466173745472616e73666572476174657761793a20736f7572636520646f6d615f8201527f696e206e6f7420666f756e640000000000000000000000000000000000000000602082015250565b5f61475d602c83613add565b915061476882614703565b604082019050919050565b5f6020820190508181035f83015261478a81614751565b9050919050565b7f466173745472616e73666572476174657761793a20696e636f727265637420645f8201527f657374696e6174696f6e20646f6d61696e20666f72206f726465720000000000602082015250565b5f6147eb603b83613add565b91506147f682614791565b604082019050919050565b5f6020820190508181035f830152614818816147df565b9050919050565b7f466173745472616e73666572476174657761793a206f7264657220616c7265615f8201527f64792066696c6c65640000000000000000000000000000000000000000000000602082015250565b5f614879602983613add565b91506148848261481f565b604082019050919050565b5f6020820190508181035f8301526148a68161486d565b9050919050565b5f6040820190506148c05f830185613a51565b6148cd6020830184613668565b9392505050565b5f8115159050919050565b6148e8816148d4565b81146148f2575f5ffd5b50565b5f81519050614903816148df565b92915050565b5f6020828403121561491e5761491d613201565b5b5f61492b848285016148f5565b91505092915050565b5f61493f8284614081565b915081905092915050565b7f466173745472616e73666572476174657761793a2064657374696e6174696f6e5f8201527f20646f6d61696e206e6f7420666f756e64000000000000000000000000000000602082015250565b5f6149a4603183613add565b91506149af8261494a565b604082019050919050565b5f6020820190508181035f8301526149d181614998565b9050919050565b5f6149e282613332565b91506149ed83613332565b9250828201905063ffffffff811115614a0957614a0861437d565b5b92915050565b5f6020820190508181035f830152614a2781846141fd565b905092915050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f614a65614a60614a5b84614a2f565b6138bb565b614a38565b9050919050565b614a7581614a4b565b82525050565b5f602082019050614a8e5f830184614a6c565b92915050565b7f466173745472616e73666572476174657761793a206f72646572206e6f7420665f8201527f696c6c6564000000000000000000000000000000000000000000000000000000602082015250565b5f614aee602583613add565b9150614af982614a94565b604082019050919050565b5f6020820190508181035f830152614b1b81614ae2565b9050919050565b7f466173745472616e73666572476174657761793a206f72646572206e6f7420665f8201527f6f756e6400000000000000000000000000000000000000000000000000000000602082015250565b5f614b7c602483613add565b9150614b8782614b22565b604082019050919050565b5f6020820190508181035f830152614ba981614b70565b9050919050565b7f466173745472616e73666572476174657761793a20696e636f727265637420645f8201527f6f6d61696e20666f7220736574746c656d656e74000000000000000000000000602082015250565b5f614c0a603483613add565b9150614c1582614bb0565b604082019050919050565b5f6020820190508181035f830152614c3781614bfe565b9050919050565b5f606082019050614c515f830186613a51565b614c5e6020830185613a51565b614c6b6040830184613668565b949350505050565b5f819050919050565b614c8d614c88826132ff565b614c73565b82525050565b5f8160e01b9050919050565b5f614ca982614c93565b9050919050565b614cc1614cbc82613332565b614c9f565b82525050565b5f614cd2828c6140ba565b602082019150614ce2828b6140ba565b602082019150614cf2828a614c7c565b602082019150614d028289614c7c565b602082019150614d128288614c7c565b602082019150614d228287614cb0565b600482019150614d328286614cb0565b600482019150614d428285614c7c565b602082019150614d528284614081565b91508190509a9950505050505050505050565b5f614d6f826138e5565b9050919050565b614d7f81614d65565b82525050565b614d8e816132ff565b82525050565b604082015f820151614da85f850182614d76565b506020820151614dbb6020850182614d85565b50505050565b608082015f820151614dd55f850182614d94565b506020820151614de86040850182614d85565b506040820151614dfb6060850182614d85565b50505050565b614e0a8161375c565b82525050565b604082015f820151614e245f850182614e01565b506020820151614e376020850182614d85565b50505050565b5f614e4883856141ed565b9350614e5583858461339f565b614e5e8361320d565b840190509392505050565b5f61010082019050614e7d5f830188614dc1565b614e8a6080830187614e10565b614e9760c0830186613a51565b81810360e0830152614eaa818486614e3d565b9050969550505050505056fea26469706673582212209e9ac8135ad69ffbf7a405c86b6ec597ed2313508f39240b76471f4b3177a65d64736f6c634300081c0033",
}

// FastTransferGatewayABI is the input ABI used to generate the binding from.
// Deprecated: Use FastTransferGatewayMetaData.ABI instead.
var FastTransferGatewayABI = FastTransferGatewayMetaData.ABI

// FastTransferGatewayBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FastTransferGatewayMetaData.Bin instead.
var FastTransferGatewayBin = FastTransferGatewayMetaData.Bin

// DeployFastTransferGateway deploys a new Ethereum contract, binding an instance of FastTransferGateway to it.
func DeployFastTransferGateway(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FastTransferGateway, error) {
	parsed, err := FastTransferGatewayMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FastTransferGatewayBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FastTransferGateway{FastTransferGatewayCaller: FastTransferGatewayCaller{contract: contract}, FastTransferGatewayTransactor: FastTransferGatewayTransactor{contract: contract}, FastTransferGatewayFilterer: FastTransferGatewayFilterer{contract: contract}}, nil
}

// FastTransferGateway is an auto generated Go binding around an Ethereum contract.
type FastTransferGateway struct {
	FastTransferGatewayCaller     // Read-only binding to the contract
	FastTransferGatewayTransactor // Write-only binding to the contract
	FastTransferGatewayFilterer   // Log filterer for contract events
}

// FastTransferGatewayCaller is an auto generated read-only Go binding around an Ethereum contract.
type FastTransferGatewayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FastTransferGatewayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FastTransferGatewayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FastTransferGatewayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FastTransferGatewayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FastTransferGatewaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FastTransferGatewaySession struct {
	Contract     *FastTransferGateway // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// FastTransferGatewayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FastTransferGatewayCallerSession struct {
	Contract *FastTransferGatewayCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// FastTransferGatewayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FastTransferGatewayTransactorSession struct {
	Contract     *FastTransferGatewayTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// FastTransferGatewayRaw is an auto generated low-level Go binding around an Ethereum contract.
type FastTransferGatewayRaw struct {
	Contract *FastTransferGateway // Generic contract binding to access the raw methods on
}

// FastTransferGatewayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FastTransferGatewayCallerRaw struct {
	Contract *FastTransferGatewayCaller // Generic read-only contract binding to access the raw methods on
}

// FastTransferGatewayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FastTransferGatewayTransactorRaw struct {
	Contract *FastTransferGatewayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFastTransferGateway creates a new instance of FastTransferGateway, bound to a specific deployed contract.
func NewFastTransferGateway(address common.Address, backend bind.ContractBackend) (*FastTransferGateway, error) {
	contract, err := bindFastTransferGateway(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FastTransferGateway{FastTransferGatewayCaller: FastTransferGatewayCaller{contract: contract}, FastTransferGatewayTransactor: FastTransferGatewayTransactor{contract: contract}, FastTransferGatewayFilterer: FastTransferGatewayFilterer{contract: contract}}, nil
}

// NewFastTransferGatewayCaller creates a new read-only instance of FastTransferGateway, bound to a specific deployed contract.
func NewFastTransferGatewayCaller(address common.Address, caller bind.ContractCaller) (*FastTransferGatewayCaller, error) {
	contract, err := bindFastTransferGateway(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FastTransferGatewayCaller{contract: contract}, nil
}

// NewFastTransferGatewayTransactor creates a new write-only instance of FastTransferGateway, bound to a specific deployed contract.
func NewFastTransferGatewayTransactor(address common.Address, transactor bind.ContractTransactor) (*FastTransferGatewayTransactor, error) {
	contract, err := bindFastTransferGateway(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FastTransferGatewayTransactor{contract: contract}, nil
}

// NewFastTransferGatewayFilterer creates a new log filterer instance of FastTransferGateway, bound to a specific deployed contract.
func NewFastTransferGatewayFilterer(address common.Address, filterer bind.ContractFilterer) (*FastTransferGatewayFilterer, error) {
	contract, err := bindFastTransferGateway(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FastTransferGatewayFilterer{contract: contract}, nil
}

// bindFastTransferGateway binds a generic wrapper to an already deployed contract.
func bindFastTransferGateway(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FastTransferGatewayMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FastTransferGateway *FastTransferGatewayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FastTransferGateway.Contract.FastTransferGatewayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FastTransferGateway *FastTransferGatewayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.FastTransferGatewayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FastTransferGateway *FastTransferGatewayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.FastTransferGatewayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FastTransferGateway *FastTransferGatewayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FastTransferGateway.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FastTransferGateway *FastTransferGatewayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FastTransferGateway *FastTransferGatewayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.contract.Transact(opts, method, params...)
}

// PERMIT2 is a free data retrieval call binding the contract method 0x6afdd850.
//
// Solidity: function PERMIT2() view returns(address)
func (_FastTransferGateway *FastTransferGatewayCaller) PERMIT2(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "PERMIT2")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PERMIT2 is a free data retrieval call binding the contract method 0x6afdd850.
//
// Solidity: function PERMIT2() view returns(address)
func (_FastTransferGateway *FastTransferGatewaySession) PERMIT2() (common.Address, error) {
	return _FastTransferGateway.Contract.PERMIT2(&_FastTransferGateway.CallOpts)
}

// PERMIT2 is a free data retrieval call binding the contract method 0x6afdd850.
//
// Solidity: function PERMIT2() view returns(address)
func (_FastTransferGateway *FastTransferGatewayCallerSession) PERMIT2() (common.Address, error) {
	return _FastTransferGateway.Contract.PERMIT2(&_FastTransferGateway.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_FastTransferGateway *FastTransferGatewayCaller) UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "UPGRADE_INTERFACE_VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_FastTransferGateway *FastTransferGatewaySession) UPGRADEINTERFACEVERSION() (string, error) {
	return _FastTransferGateway.Contract.UPGRADEINTERFACEVERSION(&_FastTransferGateway.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_FastTransferGateway *FastTransferGatewayCallerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _FastTransferGateway.Contract.UPGRADEINTERFACEVERSION(&_FastTransferGateway.CallOpts)
}

// LocalDomain is a free data retrieval call binding the contract method 0x8d3638f4.
//
// Solidity: function localDomain() view returns(uint32)
func (_FastTransferGateway *FastTransferGatewayCaller) LocalDomain(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "localDomain")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// LocalDomain is a free data retrieval call binding the contract method 0x8d3638f4.
//
// Solidity: function localDomain() view returns(uint32)
func (_FastTransferGateway *FastTransferGatewaySession) LocalDomain() (uint32, error) {
	return _FastTransferGateway.Contract.LocalDomain(&_FastTransferGateway.CallOpts)
}

// LocalDomain is a free data retrieval call binding the contract method 0x8d3638f4.
//
// Solidity: function localDomain() view returns(uint32)
func (_FastTransferGateway *FastTransferGatewayCallerSession) LocalDomain() (uint32, error) {
	return _FastTransferGateway.Contract.LocalDomain(&_FastTransferGateway.CallOpts)
}

// Mailbox is a free data retrieval call binding the contract method 0xd5438eae.
//
// Solidity: function mailbox() view returns(address)
func (_FastTransferGateway *FastTransferGatewayCaller) Mailbox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "mailbox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Mailbox is a free data retrieval call binding the contract method 0xd5438eae.
//
// Solidity: function mailbox() view returns(address)
func (_FastTransferGateway *FastTransferGatewaySession) Mailbox() (common.Address, error) {
	return _FastTransferGateway.Contract.Mailbox(&_FastTransferGateway.CallOpts)
}

// Mailbox is a free data retrieval call binding the contract method 0xd5438eae.
//
// Solidity: function mailbox() view returns(address)
func (_FastTransferGateway *FastTransferGatewayCallerSession) Mailbox() (common.Address, error) {
	return _FastTransferGateway.Contract.Mailbox(&_FastTransferGateway.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint32)
func (_FastTransferGateway *FastTransferGatewayCaller) Nonce(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "nonce")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint32)
func (_FastTransferGateway *FastTransferGatewaySession) Nonce() (uint32, error) {
	return _FastTransferGateway.Contract.Nonce(&_FastTransferGateway.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint32)
func (_FastTransferGateway *FastTransferGatewayCallerSession) Nonce() (uint32, error) {
	return _FastTransferGateway.Contract.Nonce(&_FastTransferGateway.CallOpts)
}

// OrderFills is a free data retrieval call binding the contract method 0xf7213db6.
//
// Solidity: function orderFills(bytes32 ) view returns(bytes32 orderID, address filler, uint32 sourceDomain)
func (_FastTransferGateway *FastTransferGatewayCaller) OrderFills(opts *bind.CallOpts, arg0 [32]byte) (struct {
	OrderID      [32]byte
	Filler       common.Address
	SourceDomain uint32
}, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "orderFills", arg0)

	outstruct := new(struct {
		OrderID      [32]byte
		Filler       common.Address
		SourceDomain uint32
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.OrderID = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Filler = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.SourceDomain = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

// OrderFills is a free data retrieval call binding the contract method 0xf7213db6.
//
// Solidity: function orderFills(bytes32 ) view returns(bytes32 orderID, address filler, uint32 sourceDomain)
func (_FastTransferGateway *FastTransferGatewaySession) OrderFills(arg0 [32]byte) (struct {
	OrderID      [32]byte
	Filler       common.Address
	SourceDomain uint32
}, error) {
	return _FastTransferGateway.Contract.OrderFills(&_FastTransferGateway.CallOpts, arg0)
}

// OrderFills is a free data retrieval call binding the contract method 0xf7213db6.
//
// Solidity: function orderFills(bytes32 ) view returns(bytes32 orderID, address filler, uint32 sourceDomain)
func (_FastTransferGateway *FastTransferGatewayCallerSession) OrderFills(arg0 [32]byte) (struct {
	OrderID      [32]byte
	Filler       common.Address
	SourceDomain uint32
}, error) {
	return _FastTransferGateway.Contract.OrderFills(&_FastTransferGateway.CallOpts, arg0)
}

// OrderStatuses is a free data retrieval call binding the contract method 0x7f665ee5.
//
// Solidity: function orderStatuses(bytes32 ) view returns(uint8)
func (_FastTransferGateway *FastTransferGatewayCaller) OrderStatuses(opts *bind.CallOpts, arg0 [32]byte) (uint8, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "orderStatuses", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// OrderStatuses is a free data retrieval call binding the contract method 0x7f665ee5.
//
// Solidity: function orderStatuses(bytes32 ) view returns(uint8)
func (_FastTransferGateway *FastTransferGatewaySession) OrderStatuses(arg0 [32]byte) (uint8, error) {
	return _FastTransferGateway.Contract.OrderStatuses(&_FastTransferGateway.CallOpts, arg0)
}

// OrderStatuses is a free data retrieval call binding the contract method 0x7f665ee5.
//
// Solidity: function orderStatuses(bytes32 ) view returns(uint8)
func (_FastTransferGateway *FastTransferGatewayCallerSession) OrderStatuses(arg0 [32]byte) (uint8, error) {
	return _FastTransferGateway.Contract.OrderStatuses(&_FastTransferGateway.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FastTransferGateway *FastTransferGatewayCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FastTransferGateway *FastTransferGatewaySession) Owner() (common.Address, error) {
	return _FastTransferGateway.Contract.Owner(&_FastTransferGateway.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FastTransferGateway *FastTransferGatewayCallerSession) Owner() (common.Address, error) {
	return _FastTransferGateway.Contract.Owner(&_FastTransferGateway.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FastTransferGateway *FastTransferGatewayCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FastTransferGateway *FastTransferGatewaySession) ProxiableUUID() ([32]byte, error) {
	return _FastTransferGateway.Contract.ProxiableUUID(&_FastTransferGateway.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_FastTransferGateway *FastTransferGatewayCallerSession) ProxiableUUID() ([32]byte, error) {
	return _FastTransferGateway.Contract.ProxiableUUID(&_FastTransferGateway.CallOpts)
}

// QuoteInitiateSettlement is a free data retrieval call binding the contract method 0xe88787c2.
//
// Solidity: function quoteInitiateSettlement(uint32 sourceDomain, bytes32 repaymentAddress, bytes orderIDs) view returns(uint256)
func (_FastTransferGateway *FastTransferGatewayCaller) QuoteInitiateSettlement(opts *bind.CallOpts, sourceDomain uint32, repaymentAddress [32]byte, orderIDs []byte) (*big.Int, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "quoteInitiateSettlement", sourceDomain, repaymentAddress, orderIDs)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// QuoteInitiateSettlement is a free data retrieval call binding the contract method 0xe88787c2.
//
// Solidity: function quoteInitiateSettlement(uint32 sourceDomain, bytes32 repaymentAddress, bytes orderIDs) view returns(uint256)
func (_FastTransferGateway *FastTransferGatewaySession) QuoteInitiateSettlement(sourceDomain uint32, repaymentAddress [32]byte, orderIDs []byte) (*big.Int, error) {
	return _FastTransferGateway.Contract.QuoteInitiateSettlement(&_FastTransferGateway.CallOpts, sourceDomain, repaymentAddress, orderIDs)
}

// QuoteInitiateSettlement is a free data retrieval call binding the contract method 0xe88787c2.
//
// Solidity: function quoteInitiateSettlement(uint32 sourceDomain, bytes32 repaymentAddress, bytes orderIDs) view returns(uint256)
func (_FastTransferGateway *FastTransferGatewayCallerSession) QuoteInitiateSettlement(sourceDomain uint32, repaymentAddress [32]byte, orderIDs []byte) (*big.Int, error) {
	return _FastTransferGateway.Contract.QuoteInitiateSettlement(&_FastTransferGateway.CallOpts, sourceDomain, repaymentAddress, orderIDs)
}

// QuoteInitiateTimeout is a free data retrieval call binding the contract method 0x1cabc26f.
//
// Solidity: function quoteInitiateTimeout(uint32 sourceDomain, (bytes32,bytes32,uint256,uint256,uint256,uint32,uint32,uint256,bytes)[] orders) view returns(uint256)
func (_FastTransferGateway *FastTransferGatewayCaller) QuoteInitiateTimeout(opts *bind.CallOpts, sourceDomain uint32, orders []FastTransferOrder) (*big.Int, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "quoteInitiateTimeout", sourceDomain, orders)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// QuoteInitiateTimeout is a free data retrieval call binding the contract method 0x1cabc26f.
//
// Solidity: function quoteInitiateTimeout(uint32 sourceDomain, (bytes32,bytes32,uint256,uint256,uint256,uint32,uint32,uint256,bytes)[] orders) view returns(uint256)
func (_FastTransferGateway *FastTransferGatewaySession) QuoteInitiateTimeout(sourceDomain uint32, orders []FastTransferOrder) (*big.Int, error) {
	return _FastTransferGateway.Contract.QuoteInitiateTimeout(&_FastTransferGateway.CallOpts, sourceDomain, orders)
}

// QuoteInitiateTimeout is a free data retrieval call binding the contract method 0x1cabc26f.
//
// Solidity: function quoteInitiateTimeout(uint32 sourceDomain, (bytes32,bytes32,uint256,uint256,uint256,uint32,uint32,uint256,bytes)[] orders) view returns(uint256)
func (_FastTransferGateway *FastTransferGatewayCallerSession) QuoteInitiateTimeout(sourceDomain uint32, orders []FastTransferOrder) (*big.Int, error) {
	return _FastTransferGateway.Contract.QuoteInitiateTimeout(&_FastTransferGateway.CallOpts, sourceDomain, orders)
}

// RemoteDomains is a free data retrieval call binding the contract method 0x1ea9e2e3.
//
// Solidity: function remoteDomains(uint32 ) view returns(bytes32)
func (_FastTransferGateway *FastTransferGatewayCaller) RemoteDomains(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "remoteDomains", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// RemoteDomains is a free data retrieval call binding the contract method 0x1ea9e2e3.
//
// Solidity: function remoteDomains(uint32 ) view returns(bytes32)
func (_FastTransferGateway *FastTransferGatewaySession) RemoteDomains(arg0 uint32) ([32]byte, error) {
	return _FastTransferGateway.Contract.RemoteDomains(&_FastTransferGateway.CallOpts, arg0)
}

// RemoteDomains is a free data retrieval call binding the contract method 0x1ea9e2e3.
//
// Solidity: function remoteDomains(uint32 ) view returns(bytes32)
func (_FastTransferGateway *FastTransferGatewayCallerSession) RemoteDomains(arg0 uint32) ([32]byte, error) {
	return _FastTransferGateway.Contract.RemoteDomains(&_FastTransferGateway.CallOpts, arg0)
}

// SettlementDetails is a free data retrieval call binding the contract method 0x85cf3f93.
//
// Solidity: function settlementDetails(bytes32 ) view returns(bytes32 sender, uint256 nonce, uint32 destinationDomain, uint256 amount)
func (_FastTransferGateway *FastTransferGatewayCaller) SettlementDetails(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Sender            [32]byte
	Nonce             *big.Int
	DestinationDomain uint32
	Amount            *big.Int
}, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "settlementDetails", arg0)

	outstruct := new(struct {
		Sender            [32]byte
		Nonce             *big.Int
		DestinationDomain uint32
		Amount            *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Sender = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Nonce = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.DestinationDomain = *abi.ConvertType(out[2], new(uint32)).(*uint32)
	outstruct.Amount = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// SettlementDetails is a free data retrieval call binding the contract method 0x85cf3f93.
//
// Solidity: function settlementDetails(bytes32 ) view returns(bytes32 sender, uint256 nonce, uint32 destinationDomain, uint256 amount)
func (_FastTransferGateway *FastTransferGatewaySession) SettlementDetails(arg0 [32]byte) (struct {
	Sender            [32]byte
	Nonce             *big.Int
	DestinationDomain uint32
	Amount            *big.Int
}, error) {
	return _FastTransferGateway.Contract.SettlementDetails(&_FastTransferGateway.CallOpts, arg0)
}

// SettlementDetails is a free data retrieval call binding the contract method 0x85cf3f93.
//
// Solidity: function settlementDetails(bytes32 ) view returns(bytes32 sender, uint256 nonce, uint32 destinationDomain, uint256 amount)
func (_FastTransferGateway *FastTransferGatewayCallerSession) SettlementDetails(arg0 [32]byte) (struct {
	Sender            [32]byte
	Nonce             *big.Int
	DestinationDomain uint32
	Amount            *big.Int
}, error) {
	return _FastTransferGateway.Contract.SettlementDetails(&_FastTransferGateway.CallOpts, arg0)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_FastTransferGateway *FastTransferGatewayCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FastTransferGateway.contract.Call(opts, &out, "token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_FastTransferGateway *FastTransferGatewaySession) Token() (common.Address, error) {
	return _FastTransferGateway.Contract.Token(&_FastTransferGateway.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_FastTransferGateway *FastTransferGatewayCallerSession) Token() (common.Address, error) {
	return _FastTransferGateway.Contract.Token(&_FastTransferGateway.CallOpts)
}

// FillOrder is a paid mutator transaction binding the contract method 0x95d7325d.
//
// Solidity: function fillOrder(address filler, (bytes32,bytes32,uint256,uint256,uint256,uint32,uint32,uint256,bytes) order) returns()
func (_FastTransferGateway *FastTransferGatewayTransactor) FillOrder(opts *bind.TransactOpts, filler common.Address, order FastTransferOrder) (*types.Transaction, error) {
	return _FastTransferGateway.contract.Transact(opts, "fillOrder", filler, order)
}

// FillOrder is a paid mutator transaction binding the contract method 0x95d7325d.
//
// Solidity: function fillOrder(address filler, (bytes32,bytes32,uint256,uint256,uint256,uint32,uint32,uint256,bytes) order) returns()
func (_FastTransferGateway *FastTransferGatewaySession) FillOrder(filler common.Address, order FastTransferOrder) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.FillOrder(&_FastTransferGateway.TransactOpts, filler, order)
}

// FillOrder is a paid mutator transaction binding the contract method 0x95d7325d.
//
// Solidity: function fillOrder(address filler, (bytes32,bytes32,uint256,uint256,uint256,uint32,uint32,uint256,bytes) order) returns()
func (_FastTransferGateway *FastTransferGatewayTransactorSession) FillOrder(filler common.Address, order FastTransferOrder) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.FillOrder(&_FastTransferGateway.TransactOpts, filler, order)
}

// Handle is a paid mutator transaction binding the contract method 0x56d5d475.
//
// Solidity: function handle(uint32 _origin, bytes32 _sender, bytes _message) payable returns()
func (_FastTransferGateway *FastTransferGatewayTransactor) Handle(opts *bind.TransactOpts, _origin uint32, _sender [32]byte, _message []byte) (*types.Transaction, error) {
	return _FastTransferGateway.contract.Transact(opts, "handle", _origin, _sender, _message)
}

// Handle is a paid mutator transaction binding the contract method 0x56d5d475.
//
// Solidity: function handle(uint32 _origin, bytes32 _sender, bytes _message) payable returns()
func (_FastTransferGateway *FastTransferGatewaySession) Handle(_origin uint32, _sender [32]byte, _message []byte) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.Handle(&_FastTransferGateway.TransactOpts, _origin, _sender, _message)
}

// Handle is a paid mutator transaction binding the contract method 0x56d5d475.
//
// Solidity: function handle(uint32 _origin, bytes32 _sender, bytes _message) payable returns()
func (_FastTransferGateway *FastTransferGatewayTransactorSession) Handle(_origin uint32, _sender [32]byte, _message []byte) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.Handle(&_FastTransferGateway.TransactOpts, _origin, _sender, _message)
}

// Initialize is a paid mutator transaction binding the contract method 0xf2c20924.
//
// Solidity: function initialize(uint32 _localDomain, address _owner, address _token, address _mailbox, address _permit2) returns()
func (_FastTransferGateway *FastTransferGatewayTransactor) Initialize(opts *bind.TransactOpts, _localDomain uint32, _owner common.Address, _token common.Address, _mailbox common.Address, _permit2 common.Address) (*types.Transaction, error) {
	return _FastTransferGateway.contract.Transact(opts, "initialize", _localDomain, _owner, _token, _mailbox, _permit2)
}

// Initialize is a paid mutator transaction binding the contract method 0xf2c20924.
//
// Solidity: function initialize(uint32 _localDomain, address _owner, address _token, address _mailbox, address _permit2) returns()
func (_FastTransferGateway *FastTransferGatewaySession) Initialize(_localDomain uint32, _owner common.Address, _token common.Address, _mailbox common.Address, _permit2 common.Address) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.Initialize(&_FastTransferGateway.TransactOpts, _localDomain, _owner, _token, _mailbox, _permit2)
}

// Initialize is a paid mutator transaction binding the contract method 0xf2c20924.
//
// Solidity: function initialize(uint32 _localDomain, address _owner, address _token, address _mailbox, address _permit2) returns()
func (_FastTransferGateway *FastTransferGatewayTransactorSession) Initialize(_localDomain uint32, _owner common.Address, _token common.Address, _mailbox common.Address, _permit2 common.Address) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.Initialize(&_FastTransferGateway.TransactOpts, _localDomain, _owner, _token, _mailbox, _permit2)
}

// InitiateSettlement is a paid mutator transaction binding the contract method 0x30c5b926.
//
// Solidity: function initiateSettlement(bytes32 repaymentAddress, bytes orderIDs) payable returns()
func (_FastTransferGateway *FastTransferGatewayTransactor) InitiateSettlement(opts *bind.TransactOpts, repaymentAddress [32]byte, orderIDs []byte) (*types.Transaction, error) {
	return _FastTransferGateway.contract.Transact(opts, "initiateSettlement", repaymentAddress, orderIDs)
}

// InitiateSettlement is a paid mutator transaction binding the contract method 0x30c5b926.
//
// Solidity: function initiateSettlement(bytes32 repaymentAddress, bytes orderIDs) payable returns()
func (_FastTransferGateway *FastTransferGatewaySession) InitiateSettlement(repaymentAddress [32]byte, orderIDs []byte) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.InitiateSettlement(&_FastTransferGateway.TransactOpts, repaymentAddress, orderIDs)
}

// InitiateSettlement is a paid mutator transaction binding the contract method 0x30c5b926.
//
// Solidity: function initiateSettlement(bytes32 repaymentAddress, bytes orderIDs) payable returns()
func (_FastTransferGateway *FastTransferGatewayTransactorSession) InitiateSettlement(repaymentAddress [32]byte, orderIDs []byte) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.InitiateSettlement(&_FastTransferGateway.TransactOpts, repaymentAddress, orderIDs)
}

// InitiateTimeout is a paid mutator transaction binding the contract method 0x13d9c7f9.
//
// Solidity: function initiateTimeout((bytes32,bytes32,uint256,uint256,uint256,uint32,uint32,uint256,bytes)[] orders) payable returns()
func (_FastTransferGateway *FastTransferGatewayTransactor) InitiateTimeout(opts *bind.TransactOpts, orders []FastTransferOrder) (*types.Transaction, error) {
	return _FastTransferGateway.contract.Transact(opts, "initiateTimeout", orders)
}

// InitiateTimeout is a paid mutator transaction binding the contract method 0x13d9c7f9.
//
// Solidity: function initiateTimeout((bytes32,bytes32,uint256,uint256,uint256,uint32,uint32,uint256,bytes)[] orders) payable returns()
func (_FastTransferGateway *FastTransferGatewaySession) InitiateTimeout(orders []FastTransferOrder) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.InitiateTimeout(&_FastTransferGateway.TransactOpts, orders)
}

// InitiateTimeout is a paid mutator transaction binding the contract method 0x13d9c7f9.
//
// Solidity: function initiateTimeout((bytes32,bytes32,uint256,uint256,uint256,uint32,uint32,uint256,bytes)[] orders) payable returns()
func (_FastTransferGateway *FastTransferGatewayTransactorSession) InitiateTimeout(orders []FastTransferOrder) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.InitiateTimeout(&_FastTransferGateway.TransactOpts, orders)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FastTransferGateway *FastTransferGatewayTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FastTransferGateway.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FastTransferGateway *FastTransferGatewaySession) RenounceOwnership() (*types.Transaction, error) {
	return _FastTransferGateway.Contract.RenounceOwnership(&_FastTransferGateway.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FastTransferGateway *FastTransferGatewayTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FastTransferGateway.Contract.RenounceOwnership(&_FastTransferGateway.TransactOpts)
}

// SetRemoteDomain is a paid mutator transaction binding the contract method 0xe5dc8496.
//
// Solidity: function setRemoteDomain(uint32 domain, bytes32 remoteContract) returns()
func (_FastTransferGateway *FastTransferGatewayTransactor) SetRemoteDomain(opts *bind.TransactOpts, domain uint32, remoteContract [32]byte) (*types.Transaction, error) {
	return _FastTransferGateway.contract.Transact(opts, "setRemoteDomain", domain, remoteContract)
}

// SetRemoteDomain is a paid mutator transaction binding the contract method 0xe5dc8496.
//
// Solidity: function setRemoteDomain(uint32 domain, bytes32 remoteContract) returns()
func (_FastTransferGateway *FastTransferGatewaySession) SetRemoteDomain(domain uint32, remoteContract [32]byte) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.SetRemoteDomain(&_FastTransferGateway.TransactOpts, domain, remoteContract)
}

// SetRemoteDomain is a paid mutator transaction binding the contract method 0xe5dc8496.
//
// Solidity: function setRemoteDomain(uint32 domain, bytes32 remoteContract) returns()
func (_FastTransferGateway *FastTransferGatewayTransactorSession) SetRemoteDomain(domain uint32, remoteContract [32]byte) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.SetRemoteDomain(&_FastTransferGateway.TransactOpts, domain, remoteContract)
}

// SubmitOrder is a paid mutator transaction binding the contract method 0xf13a89b4.
//
// Solidity: function submitOrder(bytes32 sender, bytes32 recipient, uint256 amountIn, uint256 amountOut, uint32 destinationDomain, uint256 timeoutTimestamp, bytes data) returns(bytes32)
func (_FastTransferGateway *FastTransferGatewayTransactor) SubmitOrder(opts *bind.TransactOpts, sender [32]byte, recipient [32]byte, amountIn *big.Int, amountOut *big.Int, destinationDomain uint32, timeoutTimestamp *big.Int, data []byte) (*types.Transaction, error) {
	return _FastTransferGateway.contract.Transact(opts, "submitOrder", sender, recipient, amountIn, amountOut, destinationDomain, timeoutTimestamp, data)
}

// SubmitOrder is a paid mutator transaction binding the contract method 0xf13a89b4.
//
// Solidity: function submitOrder(bytes32 sender, bytes32 recipient, uint256 amountIn, uint256 amountOut, uint32 destinationDomain, uint256 timeoutTimestamp, bytes data) returns(bytes32)
func (_FastTransferGateway *FastTransferGatewaySession) SubmitOrder(sender [32]byte, recipient [32]byte, amountIn *big.Int, amountOut *big.Int, destinationDomain uint32, timeoutTimestamp *big.Int, data []byte) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.SubmitOrder(&_FastTransferGateway.TransactOpts, sender, recipient, amountIn, amountOut, destinationDomain, timeoutTimestamp, data)
}

// SubmitOrder is a paid mutator transaction binding the contract method 0xf13a89b4.
//
// Solidity: function submitOrder(bytes32 sender, bytes32 recipient, uint256 amountIn, uint256 amountOut, uint32 destinationDomain, uint256 timeoutTimestamp, bytes data) returns(bytes32)
func (_FastTransferGateway *FastTransferGatewayTransactorSession) SubmitOrder(sender [32]byte, recipient [32]byte, amountIn *big.Int, amountOut *big.Int, destinationDomain uint32, timeoutTimestamp *big.Int, data []byte) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.SubmitOrder(&_FastTransferGateway.TransactOpts, sender, recipient, amountIn, amountOut, destinationDomain, timeoutTimestamp, data)
}

// SubmitOrderWithPermit is a paid mutator transaction binding the contract method 0xf23517ee.
//
// Solidity: function submitOrderWithPermit(bytes32 sender, bytes32 recipient, uint256 amountIn, uint256 amountOut, uint32 destinationDomain, uint256 timeoutTimestamp, uint256 permitDeadline, bytes data, bytes signature) returns(bytes32)
func (_FastTransferGateway *FastTransferGatewayTransactor) SubmitOrderWithPermit(opts *bind.TransactOpts, sender [32]byte, recipient [32]byte, amountIn *big.Int, amountOut *big.Int, destinationDomain uint32, timeoutTimestamp *big.Int, permitDeadline *big.Int, data []byte, signature []byte) (*types.Transaction, error) {
	return _FastTransferGateway.contract.Transact(opts, "submitOrderWithPermit", sender, recipient, amountIn, amountOut, destinationDomain, timeoutTimestamp, permitDeadline, data, signature)
}

// SubmitOrderWithPermit is a paid mutator transaction binding the contract method 0xf23517ee.
//
// Solidity: function submitOrderWithPermit(bytes32 sender, bytes32 recipient, uint256 amountIn, uint256 amountOut, uint32 destinationDomain, uint256 timeoutTimestamp, uint256 permitDeadline, bytes data, bytes signature) returns(bytes32)
func (_FastTransferGateway *FastTransferGatewaySession) SubmitOrderWithPermit(sender [32]byte, recipient [32]byte, amountIn *big.Int, amountOut *big.Int, destinationDomain uint32, timeoutTimestamp *big.Int, permitDeadline *big.Int, data []byte, signature []byte) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.SubmitOrderWithPermit(&_FastTransferGateway.TransactOpts, sender, recipient, amountIn, amountOut, destinationDomain, timeoutTimestamp, permitDeadline, data, signature)
}

// SubmitOrderWithPermit is a paid mutator transaction binding the contract method 0xf23517ee.
//
// Solidity: function submitOrderWithPermit(bytes32 sender, bytes32 recipient, uint256 amountIn, uint256 amountOut, uint32 destinationDomain, uint256 timeoutTimestamp, uint256 permitDeadline, bytes data, bytes signature) returns(bytes32)
func (_FastTransferGateway *FastTransferGatewayTransactorSession) SubmitOrderWithPermit(sender [32]byte, recipient [32]byte, amountIn *big.Int, amountOut *big.Int, destinationDomain uint32, timeoutTimestamp *big.Int, permitDeadline *big.Int, data []byte, signature []byte) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.SubmitOrderWithPermit(&_FastTransferGateway.TransactOpts, sender, recipient, amountIn, amountOut, destinationDomain, timeoutTimestamp, permitDeadline, data, signature)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FastTransferGateway *FastTransferGatewayTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FastTransferGateway.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FastTransferGateway *FastTransferGatewaySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.TransferOwnership(&_FastTransferGateway.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FastTransferGateway *FastTransferGatewayTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.TransferOwnership(&_FastTransferGateway.TransactOpts, newOwner)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FastTransferGateway *FastTransferGatewayTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FastTransferGateway.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FastTransferGateway *FastTransferGatewaySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.UpgradeToAndCall(&_FastTransferGateway.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_FastTransferGateway *FastTransferGatewayTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _FastTransferGateway.Contract.UpgradeToAndCall(&_FastTransferGateway.TransactOpts, newImplementation, data)
}

// FastTransferGatewayInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the FastTransferGateway contract.
type FastTransferGatewayInitializedIterator struct {
	Event *FastTransferGatewayInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastTransferGatewayInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastTransferGatewayInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastTransferGatewayInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastTransferGatewayInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastTransferGatewayInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastTransferGatewayInitialized represents a Initialized event raised by the FastTransferGateway contract.
type FastTransferGatewayInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_FastTransferGateway *FastTransferGatewayFilterer) FilterInitialized(opts *bind.FilterOpts) (*FastTransferGatewayInitializedIterator, error) {

	logs, sub, err := _FastTransferGateway.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &FastTransferGatewayInitializedIterator{contract: _FastTransferGateway.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_FastTransferGateway *FastTransferGatewayFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *FastTransferGatewayInitialized) (event.Subscription, error) {

	logs, sub, err := _FastTransferGateway.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastTransferGatewayInitialized)
				if err := _FastTransferGateway.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_FastTransferGateway *FastTransferGatewayFilterer) ParseInitialized(log types.Log) (*FastTransferGatewayInitialized, error) {
	event := new(FastTransferGatewayInitialized)
	if err := _FastTransferGateway.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastTransferGatewayOrderAlreadySettledIterator is returned from FilterOrderAlreadySettled and is used to iterate over the raw logs and unpacked data for OrderAlreadySettled events raised by the FastTransferGateway contract.
type FastTransferGatewayOrderAlreadySettledIterator struct {
	Event *FastTransferGatewayOrderAlreadySettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastTransferGatewayOrderAlreadySettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastTransferGatewayOrderAlreadySettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastTransferGatewayOrderAlreadySettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastTransferGatewayOrderAlreadySettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastTransferGatewayOrderAlreadySettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastTransferGatewayOrderAlreadySettled represents a OrderAlreadySettled event raised by the FastTransferGateway contract.
type FastTransferGatewayOrderAlreadySettled struct {
	OrderID [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderAlreadySettled is a free log retrieval operation binding the contract event 0x0349d9fa752b33cd4d30f97058afcf8e7b9d5c3c7a20056699a8947fedf73138.
//
// Solidity: event OrderAlreadySettled(bytes32 indexed orderID)
func (_FastTransferGateway *FastTransferGatewayFilterer) FilterOrderAlreadySettled(opts *bind.FilterOpts, orderID [][32]byte) (*FastTransferGatewayOrderAlreadySettledIterator, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _FastTransferGateway.contract.FilterLogs(opts, "OrderAlreadySettled", orderIDRule)
	if err != nil {
		return nil, err
	}
	return &FastTransferGatewayOrderAlreadySettledIterator{contract: _FastTransferGateway.contract, event: "OrderAlreadySettled", logs: logs, sub: sub}, nil
}

// WatchOrderAlreadySettled is a free log subscription operation binding the contract event 0x0349d9fa752b33cd4d30f97058afcf8e7b9d5c3c7a20056699a8947fedf73138.
//
// Solidity: event OrderAlreadySettled(bytes32 indexed orderID)
func (_FastTransferGateway *FastTransferGatewayFilterer) WatchOrderAlreadySettled(opts *bind.WatchOpts, sink chan<- *FastTransferGatewayOrderAlreadySettled, orderID [][32]byte) (event.Subscription, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _FastTransferGateway.contract.WatchLogs(opts, "OrderAlreadySettled", orderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastTransferGatewayOrderAlreadySettled)
				if err := _FastTransferGateway.contract.UnpackLog(event, "OrderAlreadySettled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderAlreadySettled is a log parse operation binding the contract event 0x0349d9fa752b33cd4d30f97058afcf8e7b9d5c3c7a20056699a8947fedf73138.
//
// Solidity: event OrderAlreadySettled(bytes32 indexed orderID)
func (_FastTransferGateway *FastTransferGatewayFilterer) ParseOrderAlreadySettled(log types.Log) (*FastTransferGatewayOrderAlreadySettled, error) {
	event := new(FastTransferGatewayOrderAlreadySettled)
	if err := _FastTransferGateway.contract.UnpackLog(event, "OrderAlreadySettled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastTransferGatewayOrderRefundedIterator is returned from FilterOrderRefunded and is used to iterate over the raw logs and unpacked data for OrderRefunded events raised by the FastTransferGateway contract.
type FastTransferGatewayOrderRefundedIterator struct {
	Event *FastTransferGatewayOrderRefunded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastTransferGatewayOrderRefundedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastTransferGatewayOrderRefunded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastTransferGatewayOrderRefunded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastTransferGatewayOrderRefundedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastTransferGatewayOrderRefundedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastTransferGatewayOrderRefunded represents a OrderRefunded event raised by the FastTransferGateway contract.
type FastTransferGatewayOrderRefunded struct {
	OrderID [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderRefunded is a free log retrieval operation binding the contract event 0xa60671d8537ed193e567f86ddf28cf35dc67073b5ad80a2d41359cfa78db0a1e.
//
// Solidity: event OrderRefunded(bytes32 indexed orderID)
func (_FastTransferGateway *FastTransferGatewayFilterer) FilterOrderRefunded(opts *bind.FilterOpts, orderID [][32]byte) (*FastTransferGatewayOrderRefundedIterator, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _FastTransferGateway.contract.FilterLogs(opts, "OrderRefunded", orderIDRule)
	if err != nil {
		return nil, err
	}
	return &FastTransferGatewayOrderRefundedIterator{contract: _FastTransferGateway.contract, event: "OrderRefunded", logs: logs, sub: sub}, nil
}

// WatchOrderRefunded is a free log subscription operation binding the contract event 0xa60671d8537ed193e567f86ddf28cf35dc67073b5ad80a2d41359cfa78db0a1e.
//
// Solidity: event OrderRefunded(bytes32 indexed orderID)
func (_FastTransferGateway *FastTransferGatewayFilterer) WatchOrderRefunded(opts *bind.WatchOpts, sink chan<- *FastTransferGatewayOrderRefunded, orderID [][32]byte) (event.Subscription, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _FastTransferGateway.contract.WatchLogs(opts, "OrderRefunded", orderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastTransferGatewayOrderRefunded)
				if err := _FastTransferGateway.contract.UnpackLog(event, "OrderRefunded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderRefunded is a log parse operation binding the contract event 0xa60671d8537ed193e567f86ddf28cf35dc67073b5ad80a2d41359cfa78db0a1e.
//
// Solidity: event OrderRefunded(bytes32 indexed orderID)
func (_FastTransferGateway *FastTransferGatewayFilterer) ParseOrderRefunded(log types.Log) (*FastTransferGatewayOrderRefunded, error) {
	event := new(FastTransferGatewayOrderRefunded)
	if err := _FastTransferGateway.contract.UnpackLog(event, "OrderRefunded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastTransferGatewayOrderSettledIterator is returned from FilterOrderSettled and is used to iterate over the raw logs and unpacked data for OrderSettled events raised by the FastTransferGateway contract.
type FastTransferGatewayOrderSettledIterator struct {
	Event *FastTransferGatewayOrderSettled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastTransferGatewayOrderSettledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastTransferGatewayOrderSettled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastTransferGatewayOrderSettled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastTransferGatewayOrderSettledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastTransferGatewayOrderSettledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastTransferGatewayOrderSettled represents a OrderSettled event raised by the FastTransferGateway contract.
type FastTransferGatewayOrderSettled struct {
	OrderID [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderSettled is a free log retrieval operation binding the contract event 0xd4250d6114a611e75d68b1c6f14c61e967863d8ac20bc8ebfa4e5f28f6647366.
//
// Solidity: event OrderSettled(bytes32 indexed orderID)
func (_FastTransferGateway *FastTransferGatewayFilterer) FilterOrderSettled(opts *bind.FilterOpts, orderID [][32]byte) (*FastTransferGatewayOrderSettledIterator, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _FastTransferGateway.contract.FilterLogs(opts, "OrderSettled", orderIDRule)
	if err != nil {
		return nil, err
	}
	return &FastTransferGatewayOrderSettledIterator{contract: _FastTransferGateway.contract, event: "OrderSettled", logs: logs, sub: sub}, nil
}

// WatchOrderSettled is a free log subscription operation binding the contract event 0xd4250d6114a611e75d68b1c6f14c61e967863d8ac20bc8ebfa4e5f28f6647366.
//
// Solidity: event OrderSettled(bytes32 indexed orderID)
func (_FastTransferGateway *FastTransferGatewayFilterer) WatchOrderSettled(opts *bind.WatchOpts, sink chan<- *FastTransferGatewayOrderSettled, orderID [][32]byte) (event.Subscription, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _FastTransferGateway.contract.WatchLogs(opts, "OrderSettled", orderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastTransferGatewayOrderSettled)
				if err := _FastTransferGateway.contract.UnpackLog(event, "OrderSettled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderSettled is a log parse operation binding the contract event 0xd4250d6114a611e75d68b1c6f14c61e967863d8ac20bc8ebfa4e5f28f6647366.
//
// Solidity: event OrderSettled(bytes32 indexed orderID)
func (_FastTransferGateway *FastTransferGatewayFilterer) ParseOrderSettled(log types.Log) (*FastTransferGatewayOrderSettled, error) {
	event := new(FastTransferGatewayOrderSettled)
	if err := _FastTransferGateway.contract.UnpackLog(event, "OrderSettled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastTransferGatewayOrderSubmittedIterator is returned from FilterOrderSubmitted and is used to iterate over the raw logs and unpacked data for OrderSubmitted events raised by the FastTransferGateway contract.
type FastTransferGatewayOrderSubmittedIterator struct {
	Event *FastTransferGatewayOrderSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastTransferGatewayOrderSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastTransferGatewayOrderSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastTransferGatewayOrderSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastTransferGatewayOrderSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastTransferGatewayOrderSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastTransferGatewayOrderSubmitted represents a OrderSubmitted event raised by the FastTransferGateway contract.
type FastTransferGatewayOrderSubmitted struct {
	OrderID [32]byte
	Order   []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderSubmitted is a free log retrieval operation binding the contract event 0x59f858504f8d8ad967dd7453df850e265270474e364b7e2fbd3333e06efdbfc0.
//
// Solidity: event OrderSubmitted(bytes32 indexed orderID, bytes order)
func (_FastTransferGateway *FastTransferGatewayFilterer) FilterOrderSubmitted(opts *bind.FilterOpts, orderID [][32]byte) (*FastTransferGatewayOrderSubmittedIterator, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _FastTransferGateway.contract.FilterLogs(opts, "OrderSubmitted", orderIDRule)
	if err != nil {
		return nil, err
	}
	return &FastTransferGatewayOrderSubmittedIterator{contract: _FastTransferGateway.contract, event: "OrderSubmitted", logs: logs, sub: sub}, nil
}

// WatchOrderSubmitted is a free log subscription operation binding the contract event 0x59f858504f8d8ad967dd7453df850e265270474e364b7e2fbd3333e06efdbfc0.
//
// Solidity: event OrderSubmitted(bytes32 indexed orderID, bytes order)
func (_FastTransferGateway *FastTransferGatewayFilterer) WatchOrderSubmitted(opts *bind.WatchOpts, sink chan<- *FastTransferGatewayOrderSubmitted, orderID [][32]byte) (event.Subscription, error) {

	var orderIDRule []interface{}
	for _, orderIDItem := range orderID {
		orderIDRule = append(orderIDRule, orderIDItem)
	}

	logs, sub, err := _FastTransferGateway.contract.WatchLogs(opts, "OrderSubmitted", orderIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastTransferGatewayOrderSubmitted)
				if err := _FastTransferGateway.contract.UnpackLog(event, "OrderSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderSubmitted is a log parse operation binding the contract event 0x59f858504f8d8ad967dd7453df850e265270474e364b7e2fbd3333e06efdbfc0.
//
// Solidity: event OrderSubmitted(bytes32 indexed orderID, bytes order)
func (_FastTransferGateway *FastTransferGatewayFilterer) ParseOrderSubmitted(log types.Log) (*FastTransferGatewayOrderSubmitted, error) {
	event := new(FastTransferGatewayOrderSubmitted)
	if err := _FastTransferGateway.contract.UnpackLog(event, "OrderSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastTransferGatewayOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FastTransferGateway contract.
type FastTransferGatewayOwnershipTransferredIterator struct {
	Event *FastTransferGatewayOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastTransferGatewayOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastTransferGatewayOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastTransferGatewayOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastTransferGatewayOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastTransferGatewayOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastTransferGatewayOwnershipTransferred represents a OwnershipTransferred event raised by the FastTransferGateway contract.
type FastTransferGatewayOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FastTransferGateway *FastTransferGatewayFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FastTransferGatewayOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FastTransferGateway.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FastTransferGatewayOwnershipTransferredIterator{contract: _FastTransferGateway.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FastTransferGateway *FastTransferGatewayFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FastTransferGatewayOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FastTransferGateway.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastTransferGatewayOwnershipTransferred)
				if err := _FastTransferGateway.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FastTransferGateway *FastTransferGatewayFilterer) ParseOwnershipTransferred(log types.Log) (*FastTransferGatewayOwnershipTransferred, error) {
	event := new(FastTransferGatewayOwnershipTransferred)
	if err := _FastTransferGateway.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FastTransferGatewayUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the FastTransferGateway contract.
type FastTransferGatewayUpgradedIterator struct {
	Event *FastTransferGatewayUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FastTransferGatewayUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FastTransferGatewayUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FastTransferGatewayUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FastTransferGatewayUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FastTransferGatewayUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FastTransferGatewayUpgraded represents a Upgraded event raised by the FastTransferGateway contract.
type FastTransferGatewayUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FastTransferGateway *FastTransferGatewayFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*FastTransferGatewayUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _FastTransferGateway.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &FastTransferGatewayUpgradedIterator{contract: _FastTransferGateway.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FastTransferGateway *FastTransferGatewayFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *FastTransferGatewayUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _FastTransferGateway.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FastTransferGatewayUpgraded)
				if err := _FastTransferGateway.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_FastTransferGateway *FastTransferGatewayFilterer) ParseUpgraded(log types.Log) (*FastTransferGatewayUpgraded, error) {
	event := new(FastTransferGatewayUpgraded)
	if err := _FastTransferGateway.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
