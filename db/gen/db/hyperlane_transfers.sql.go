// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: hyperlane_transfers.sql

package db

import (
	"context"
	"database/sql"
)

const getAllHyperlaneTransfersWithTransferStatus = `-- name: GetAllHyperlaneTransfersWithTransferStatus :many
SELECT id, created_at, updated_at, source_chain_id, destination_chain_id, message_id, message_sent_tx, transfer_status, transfer_status_message, max_tx_fee_uusdc FROM hyperlane_transfers WHERE transfer_status = ?
`

func (q *Queries) GetAllHyperlaneTransfersWithTransferStatus(ctx context.Context, transferStatus string) ([]HyperlaneTransfer, error) {
	rows, err := q.db.QueryContext(ctx, getAllHyperlaneTransfersWithTransferStatus, transferStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HyperlaneTransfer
	for rows.Next() {
		var i HyperlaneTransfer
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SourceChainID,
			&i.DestinationChainID,
			&i.MessageID,
			&i.MessageSentTx,
			&i.TransferStatus,
			&i.TransferStatusMessage,
			&i.MaxTxFeeUusdc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHyperlaneTransferByMessageSentTx = `-- name: GetHyperlaneTransferByMessageSentTx :one
SELECT id, created_at, updated_at, source_chain_id, destination_chain_id, message_id, message_sent_tx, transfer_status, transfer_status_message, max_tx_fee_uusdc FROM hyperlane_transfers WHERE message_sent_tx = ? AND source_chain_id = ?
`

type GetHyperlaneTransferByMessageSentTxParams struct {
	MessageSentTx string
	SourceChainID string
}

func (q *Queries) GetHyperlaneTransferByMessageSentTx(ctx context.Context, arg GetHyperlaneTransferByMessageSentTxParams) (HyperlaneTransfer, error) {
	row := q.db.QueryRowContext(ctx, getHyperlaneTransferByMessageSentTx, arg.MessageSentTx, arg.SourceChainID)
	var i HyperlaneTransfer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SourceChainID,
		&i.DestinationChainID,
		&i.MessageID,
		&i.MessageSentTx,
		&i.TransferStatus,
		&i.TransferStatusMessage,
		&i.MaxTxFeeUusdc,
	)
	return i, err
}

const insertHyperlaneTransfer = `-- name: InsertHyperlaneTransfer :one
INSERT INTO hyperlane_transfers (
    source_chain_id,
    destination_chain_id,
    message_id,
    message_sent_tx,
    transfer_status,
    max_tx_fee_uusdc
) VALUES (?, ?, ?, ?, ?, ?) ON CONFLICT DO NOTHING RETURNING id, created_at, updated_at, source_chain_id, destination_chain_id, message_id, message_sent_tx, transfer_status, transfer_status_message, max_tx_fee_uusdc
`

type InsertHyperlaneTransferParams struct {
	SourceChainID      string
	DestinationChainID string
	MessageID          string
	MessageSentTx      string
	TransferStatus     string
	MaxTxFeeUusdc      sql.NullString
}

func (q *Queries) InsertHyperlaneTransfer(ctx context.Context, arg InsertHyperlaneTransferParams) (HyperlaneTransfer, error) {
	row := q.db.QueryRowContext(ctx, insertHyperlaneTransfer,
		arg.SourceChainID,
		arg.DestinationChainID,
		arg.MessageID,
		arg.MessageSentTx,
		arg.TransferStatus,
		arg.MaxTxFeeUusdc,
	)
	var i HyperlaneTransfer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SourceChainID,
		&i.DestinationChainID,
		&i.MessageID,
		&i.MessageSentTx,
		&i.TransferStatus,
		&i.TransferStatusMessage,
		&i.MaxTxFeeUusdc,
	)
	return i, err
}

const setMessageStatus = `-- name: SetMessageStatus :one
UPDATE hyperlane_transfers
SET updated_at=CURRENT_TIMESTAMP, transfer_status = ?, transfer_status_message = ?
WHERE source_chain_id = ? AND destination_chain_id = ? AND message_id = ?
    RETURNING id, created_at, updated_at, source_chain_id, destination_chain_id, message_id, message_sent_tx, transfer_status, transfer_status_message, max_tx_fee_uusdc
`

type SetMessageStatusParams struct {
	TransferStatus        string
	TransferStatusMessage sql.NullString
	SourceChainID         string
	DestinationChainID    string
	MessageID             string
}

func (q *Queries) SetMessageStatus(ctx context.Context, arg SetMessageStatusParams) (HyperlaneTransfer, error) {
	row := q.db.QueryRowContext(ctx, setMessageStatus,
		arg.TransferStatus,
		arg.TransferStatusMessage,
		arg.SourceChainID,
		arg.DestinationChainID,
		arg.MessageID,
	)
	var i HyperlaneTransfer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SourceChainID,
		&i.DestinationChainID,
		&i.MessageID,
		&i.MessageSentTx,
		&i.TransferStatus,
		&i.TransferStatusMessage,
		&i.MaxTxFeeUusdc,
	)
	return i, err
}
