// Code generated by mockery v2.46.3. DO NOT EDIT.

package types

import (
	mock "github.com/stretchr/testify/mock"
	proto "google.golang.org/protobuf/proto"

	types "github.com/cosmos/cosmos-sdk/types"
)

// MockTx is an autogenerated mock type for the Tx type
type MockTx struct {
	mock.Mock
}

type MockTx_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTx) EXPECT() *MockTx_Expecter {
	return &MockTx_Expecter{mock: &_m.Mock}
}

// GetMsgs provides a mock function with given fields:
func (_m *MockTx) GetMsgs() []types.Msg {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMsgs")
	}

	var r0 []types.Msg
	if rf, ok := ret.Get(0).(func() []types.Msg); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Msg)
		}
	}

	return r0
}

// MockTx_GetMsgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMsgs'
type MockTx_GetMsgs_Call struct {
	*mock.Call
}

// GetMsgs is a helper method to define mock.On call
func (_e *MockTx_Expecter) GetMsgs() *MockTx_GetMsgs_Call {
	return &MockTx_GetMsgs_Call{Call: _e.mock.On("GetMsgs")}
}

func (_c *MockTx_GetMsgs_Call) Run(run func()) *MockTx_GetMsgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTx_GetMsgs_Call) Return(_a0 []types.Msg) *MockTx_GetMsgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTx_GetMsgs_Call) RunAndReturn(run func() []types.Msg) *MockTx_GetMsgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetMsgsV2 provides a mock function with given fields:
func (_m *MockTx) GetMsgsV2() ([]proto.Message, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMsgsV2")
	}

	var r0 []proto.Message
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]proto.Message, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []proto.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]proto.Message)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTx_GetMsgsV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMsgsV2'
type MockTx_GetMsgsV2_Call struct {
	*mock.Call
}

// GetMsgsV2 is a helper method to define mock.On call
func (_e *MockTx_Expecter) GetMsgsV2() *MockTx_GetMsgsV2_Call {
	return &MockTx_GetMsgsV2_Call{Call: _e.mock.On("GetMsgsV2")}
}

func (_c *MockTx_GetMsgsV2_Call) Run(run func()) *MockTx_GetMsgsV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTx_GetMsgsV2_Call) Return(_a0 []proto.Message, _a1 error) *MockTx_GetMsgsV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTx_GetMsgsV2_Call) RunAndReturn(run func() ([]proto.Message, error)) *MockTx_GetMsgsV2_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTx creates a new instance of MockTx. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTx(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTx {
	mock := &MockTx{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
