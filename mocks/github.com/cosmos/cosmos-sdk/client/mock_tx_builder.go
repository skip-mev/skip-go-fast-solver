// Code generated by mockery v2.46.3. DO NOT EDIT.

package client

import (
	signing "github.com/cosmos/cosmos-sdk/x/auth/signing"
	mock "github.com/stretchr/testify/mock"

	tx "github.com/cosmos/cosmos-sdk/types/tx"

	txsigning "github.com/cosmos/cosmos-sdk/types/tx/signing"

	types "github.com/cosmos/cosmos-sdk/types"
)

// MockTxBuilder is an autogenerated mock type for the TxBuilder type
type MockTxBuilder struct {
	mock.Mock
}

type MockTxBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTxBuilder) EXPECT() *MockTxBuilder_Expecter {
	return &MockTxBuilder_Expecter{mock: &_m.Mock}
}

// AddAuxSignerData provides a mock function with given fields: _a0
func (_m *MockTxBuilder) AddAuxSignerData(_a0 tx.AuxSignerData) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddAuxSignerData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(tx.AuxSignerData) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTxBuilder_AddAuxSignerData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAuxSignerData'
type MockTxBuilder_AddAuxSignerData_Call struct {
	*mock.Call
}

// AddAuxSignerData is a helper method to define mock.On call
//   - _a0 tx.AuxSignerData
func (_e *MockTxBuilder_Expecter) AddAuxSignerData(_a0 interface{}) *MockTxBuilder_AddAuxSignerData_Call {
	return &MockTxBuilder_AddAuxSignerData_Call{Call: _e.mock.On("AddAuxSignerData", _a0)}
}

func (_c *MockTxBuilder_AddAuxSignerData_Call) Run(run func(_a0 tx.AuxSignerData)) *MockTxBuilder_AddAuxSignerData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tx.AuxSignerData))
	})
	return _c
}

func (_c *MockTxBuilder_AddAuxSignerData_Call) Return(_a0 error) *MockTxBuilder_AddAuxSignerData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTxBuilder_AddAuxSignerData_Call) RunAndReturn(run func(tx.AuxSignerData) error) *MockTxBuilder_AddAuxSignerData_Call {
	_c.Call.Return(run)
	return _c
}

// GetTx provides a mock function with given fields:
func (_m *MockTxBuilder) GetTx() signing.Tx {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTx")
	}

	var r0 signing.Tx
	if rf, ok := ret.Get(0).(func() signing.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(signing.Tx)
		}
	}

	return r0
}

// MockTxBuilder_GetTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTx'
type MockTxBuilder_GetTx_Call struct {
	*mock.Call
}

// GetTx is a helper method to define mock.On call
func (_e *MockTxBuilder_Expecter) GetTx() *MockTxBuilder_GetTx_Call {
	return &MockTxBuilder_GetTx_Call{Call: _e.mock.On("GetTx")}
}

func (_c *MockTxBuilder_GetTx_Call) Run(run func()) *MockTxBuilder_GetTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTxBuilder_GetTx_Call) Return(_a0 signing.Tx) *MockTxBuilder_GetTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTxBuilder_GetTx_Call) RunAndReturn(run func() signing.Tx) *MockTxBuilder_GetTx_Call {
	_c.Call.Return(run)
	return _c
}

// SetFeeAmount provides a mock function with given fields: amount
func (_m *MockTxBuilder) SetFeeAmount(amount types.Coins) {
	_m.Called(amount)
}

// MockTxBuilder_SetFeeAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFeeAmount'
type MockTxBuilder_SetFeeAmount_Call struct {
	*mock.Call
}

// SetFeeAmount is a helper method to define mock.On call
//   - amount types.Coins
func (_e *MockTxBuilder_Expecter) SetFeeAmount(amount interface{}) *MockTxBuilder_SetFeeAmount_Call {
	return &MockTxBuilder_SetFeeAmount_Call{Call: _e.mock.On("SetFeeAmount", amount)}
}

func (_c *MockTxBuilder_SetFeeAmount_Call) Run(run func(amount types.Coins)) *MockTxBuilder_SetFeeAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Coins))
	})
	return _c
}

func (_c *MockTxBuilder_SetFeeAmount_Call) Return() *MockTxBuilder_SetFeeAmount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTxBuilder_SetFeeAmount_Call) RunAndReturn(run func(types.Coins)) *MockTxBuilder_SetFeeAmount_Call {
	_c.Call.Return(run)
	return _c
}

// SetFeeGranter provides a mock function with given fields: feeGranter
func (_m *MockTxBuilder) SetFeeGranter(feeGranter types.AccAddress) {
	_m.Called(feeGranter)
}

// MockTxBuilder_SetFeeGranter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFeeGranter'
type MockTxBuilder_SetFeeGranter_Call struct {
	*mock.Call
}

// SetFeeGranter is a helper method to define mock.On call
//   - feeGranter types.AccAddress
func (_e *MockTxBuilder_Expecter) SetFeeGranter(feeGranter interface{}) *MockTxBuilder_SetFeeGranter_Call {
	return &MockTxBuilder_SetFeeGranter_Call{Call: _e.mock.On("SetFeeGranter", feeGranter)}
}

func (_c *MockTxBuilder_SetFeeGranter_Call) Run(run func(feeGranter types.AccAddress)) *MockTxBuilder_SetFeeGranter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.AccAddress))
	})
	return _c
}

func (_c *MockTxBuilder_SetFeeGranter_Call) Return() *MockTxBuilder_SetFeeGranter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTxBuilder_SetFeeGranter_Call) RunAndReturn(run func(types.AccAddress)) *MockTxBuilder_SetFeeGranter_Call {
	_c.Call.Return(run)
	return _c
}

// SetFeePayer provides a mock function with given fields: feePayer
func (_m *MockTxBuilder) SetFeePayer(feePayer types.AccAddress) {
	_m.Called(feePayer)
}

// MockTxBuilder_SetFeePayer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFeePayer'
type MockTxBuilder_SetFeePayer_Call struct {
	*mock.Call
}

// SetFeePayer is a helper method to define mock.On call
//   - feePayer types.AccAddress
func (_e *MockTxBuilder_Expecter) SetFeePayer(feePayer interface{}) *MockTxBuilder_SetFeePayer_Call {
	return &MockTxBuilder_SetFeePayer_Call{Call: _e.mock.On("SetFeePayer", feePayer)}
}

func (_c *MockTxBuilder_SetFeePayer_Call) Run(run func(feePayer types.AccAddress)) *MockTxBuilder_SetFeePayer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.AccAddress))
	})
	return _c
}

func (_c *MockTxBuilder_SetFeePayer_Call) Return() *MockTxBuilder_SetFeePayer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTxBuilder_SetFeePayer_Call) RunAndReturn(run func(types.AccAddress)) *MockTxBuilder_SetFeePayer_Call {
	_c.Call.Return(run)
	return _c
}

// SetGasLimit provides a mock function with given fields: limit
func (_m *MockTxBuilder) SetGasLimit(limit uint64) {
	_m.Called(limit)
}

// MockTxBuilder_SetGasLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGasLimit'
type MockTxBuilder_SetGasLimit_Call struct {
	*mock.Call
}

// SetGasLimit is a helper method to define mock.On call
//   - limit uint64
func (_e *MockTxBuilder_Expecter) SetGasLimit(limit interface{}) *MockTxBuilder_SetGasLimit_Call {
	return &MockTxBuilder_SetGasLimit_Call{Call: _e.mock.On("SetGasLimit", limit)}
}

func (_c *MockTxBuilder_SetGasLimit_Call) Run(run func(limit uint64)) *MockTxBuilder_SetGasLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockTxBuilder_SetGasLimit_Call) Return() *MockTxBuilder_SetGasLimit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTxBuilder_SetGasLimit_Call) RunAndReturn(run func(uint64)) *MockTxBuilder_SetGasLimit_Call {
	_c.Call.Return(run)
	return _c
}

// SetMemo provides a mock function with given fields: memo
func (_m *MockTxBuilder) SetMemo(memo string) {
	_m.Called(memo)
}

// MockTxBuilder_SetMemo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMemo'
type MockTxBuilder_SetMemo_Call struct {
	*mock.Call
}

// SetMemo is a helper method to define mock.On call
//   - memo string
func (_e *MockTxBuilder_Expecter) SetMemo(memo interface{}) *MockTxBuilder_SetMemo_Call {
	return &MockTxBuilder_SetMemo_Call{Call: _e.mock.On("SetMemo", memo)}
}

func (_c *MockTxBuilder_SetMemo_Call) Run(run func(memo string)) *MockTxBuilder_SetMemo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTxBuilder_SetMemo_Call) Return() *MockTxBuilder_SetMemo_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTxBuilder_SetMemo_Call) RunAndReturn(run func(string)) *MockTxBuilder_SetMemo_Call {
	_c.Call.Return(run)
	return _c
}

// SetMsgs provides a mock function with given fields: msgs
func (_m *MockTxBuilder) SetMsgs(msgs ...types.Msg) error {
	_va := make([]interface{}, len(msgs))
	for _i := range msgs {
		_va[_i] = msgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetMsgs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...types.Msg) error); ok {
		r0 = rf(msgs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTxBuilder_SetMsgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMsgs'
type MockTxBuilder_SetMsgs_Call struct {
	*mock.Call
}

// SetMsgs is a helper method to define mock.On call
//   - msgs ...types.Msg
func (_e *MockTxBuilder_Expecter) SetMsgs(msgs ...interface{}) *MockTxBuilder_SetMsgs_Call {
	return &MockTxBuilder_SetMsgs_Call{Call: _e.mock.On("SetMsgs",
		append([]interface{}{}, msgs...)...)}
}

func (_c *MockTxBuilder_SetMsgs_Call) Run(run func(msgs ...types.Msg)) *MockTxBuilder_SetMsgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Msg, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(types.Msg)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockTxBuilder_SetMsgs_Call) Return(_a0 error) *MockTxBuilder_SetMsgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTxBuilder_SetMsgs_Call) RunAndReturn(run func(...types.Msg) error) *MockTxBuilder_SetMsgs_Call {
	_c.Call.Return(run)
	return _c
}

// SetSignatures provides a mock function with given fields: signatures
func (_m *MockTxBuilder) SetSignatures(signatures ...txsigning.SignatureV2) error {
	_va := make([]interface{}, len(signatures))
	for _i := range signatures {
		_va[_i] = signatures[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetSignatures")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...txsigning.SignatureV2) error); ok {
		r0 = rf(signatures...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTxBuilder_SetSignatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSignatures'
type MockTxBuilder_SetSignatures_Call struct {
	*mock.Call
}

// SetSignatures is a helper method to define mock.On call
//   - signatures ...txsigning.SignatureV2
func (_e *MockTxBuilder_Expecter) SetSignatures(signatures ...interface{}) *MockTxBuilder_SetSignatures_Call {
	return &MockTxBuilder_SetSignatures_Call{Call: _e.mock.On("SetSignatures",
		append([]interface{}{}, signatures...)...)}
}

func (_c *MockTxBuilder_SetSignatures_Call) Run(run func(signatures ...txsigning.SignatureV2)) *MockTxBuilder_SetSignatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]txsigning.SignatureV2, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(txsigning.SignatureV2)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockTxBuilder_SetSignatures_Call) Return(_a0 error) *MockTxBuilder_SetSignatures_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTxBuilder_SetSignatures_Call) RunAndReturn(run func(...txsigning.SignatureV2) error) *MockTxBuilder_SetSignatures_Call {
	_c.Call.Return(run)
	return _c
}

// SetTimeoutHeight provides a mock function with given fields: height
func (_m *MockTxBuilder) SetTimeoutHeight(height uint64) {
	_m.Called(height)
}

// MockTxBuilder_SetTimeoutHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTimeoutHeight'
type MockTxBuilder_SetTimeoutHeight_Call struct {
	*mock.Call
}

// SetTimeoutHeight is a helper method to define mock.On call
//   - height uint64
func (_e *MockTxBuilder_Expecter) SetTimeoutHeight(height interface{}) *MockTxBuilder_SetTimeoutHeight_Call {
	return &MockTxBuilder_SetTimeoutHeight_Call{Call: _e.mock.On("SetTimeoutHeight", height)}
}

func (_c *MockTxBuilder_SetTimeoutHeight_Call) Run(run func(height uint64)) *MockTxBuilder_SetTimeoutHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockTxBuilder_SetTimeoutHeight_Call) Return() *MockTxBuilder_SetTimeoutHeight_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTxBuilder_SetTimeoutHeight_Call) RunAndReturn(run func(uint64)) *MockTxBuilder_SetTimeoutHeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTxBuilder creates a new instance of MockTxBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTxBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTxBuilder {
	mock := &MockTxBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
