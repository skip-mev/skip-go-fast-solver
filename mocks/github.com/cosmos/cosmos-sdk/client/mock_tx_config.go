// Code generated by mockery v2.46.3. DO NOT EDIT.

package client

import (
	client "github.com/cosmos/cosmos-sdk/client"
	mock "github.com/stretchr/testify/mock"

	signing "github.com/cosmos/cosmos-sdk/types/tx/signing"

	txsigning "cosmossdk.io/x/tx/signing"

	types "github.com/cosmos/cosmos-sdk/types"
)

// MockTxConfig is an autogenerated mock type for the TxConfig type
type MockTxConfig struct {
	mock.Mock
}

type MockTxConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTxConfig) EXPECT() *MockTxConfig_Expecter {
	return &MockTxConfig_Expecter{mock: &_m.Mock}
}

// MarshalSignatureJSON provides a mock function with given fields: _a0
func (_m *MockTxConfig) MarshalSignatureJSON(_a0 []signing.SignatureV2) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MarshalSignatureJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]signing.SignatureV2) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]signing.SignatureV2) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]signing.SignatureV2) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxConfig_MarshalSignatureJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalSignatureJSON'
type MockTxConfig_MarshalSignatureJSON_Call struct {
	*mock.Call
}

// MarshalSignatureJSON is a helper method to define mock.On call
//   - _a0 []signing.SignatureV2
func (_e *MockTxConfig_Expecter) MarshalSignatureJSON(_a0 interface{}) *MockTxConfig_MarshalSignatureJSON_Call {
	return &MockTxConfig_MarshalSignatureJSON_Call{Call: _e.mock.On("MarshalSignatureJSON", _a0)}
}

func (_c *MockTxConfig_MarshalSignatureJSON_Call) Run(run func(_a0 []signing.SignatureV2)) *MockTxConfig_MarshalSignatureJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]signing.SignatureV2))
	})
	return _c
}

func (_c *MockTxConfig_MarshalSignatureJSON_Call) Return(_a0 []byte, _a1 error) *MockTxConfig_MarshalSignatureJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTxConfig_MarshalSignatureJSON_Call) RunAndReturn(run func([]signing.SignatureV2) ([]byte, error)) *MockTxConfig_MarshalSignatureJSON_Call {
	_c.Call.Return(run)
	return _c
}

// NewTxBuilder provides a mock function with given fields:
func (_m *MockTxConfig) NewTxBuilder() client.TxBuilder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewTxBuilder")
	}

	var r0 client.TxBuilder
	if rf, ok := ret.Get(0).(func() client.TxBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.TxBuilder)
		}
	}

	return r0
}

// MockTxConfig_NewTxBuilder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTxBuilder'
type MockTxConfig_NewTxBuilder_Call struct {
	*mock.Call
}

// NewTxBuilder is a helper method to define mock.On call
func (_e *MockTxConfig_Expecter) NewTxBuilder() *MockTxConfig_NewTxBuilder_Call {
	return &MockTxConfig_NewTxBuilder_Call{Call: _e.mock.On("NewTxBuilder")}
}

func (_c *MockTxConfig_NewTxBuilder_Call) Run(run func()) *MockTxConfig_NewTxBuilder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTxConfig_NewTxBuilder_Call) Return(_a0 client.TxBuilder) *MockTxConfig_NewTxBuilder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTxConfig_NewTxBuilder_Call) RunAndReturn(run func() client.TxBuilder) *MockTxConfig_NewTxBuilder_Call {
	_c.Call.Return(run)
	return _c
}

// SignModeHandler provides a mock function with given fields:
func (_m *MockTxConfig) SignModeHandler() *txsigning.HandlerMap {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SignModeHandler")
	}

	var r0 *txsigning.HandlerMap
	if rf, ok := ret.Get(0).(func() *txsigning.HandlerMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*txsigning.HandlerMap)
		}
	}

	return r0
}

// MockTxConfig_SignModeHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignModeHandler'
type MockTxConfig_SignModeHandler_Call struct {
	*mock.Call
}

// SignModeHandler is a helper method to define mock.On call
func (_e *MockTxConfig_Expecter) SignModeHandler() *MockTxConfig_SignModeHandler_Call {
	return &MockTxConfig_SignModeHandler_Call{Call: _e.mock.On("SignModeHandler")}
}

func (_c *MockTxConfig_SignModeHandler_Call) Run(run func()) *MockTxConfig_SignModeHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTxConfig_SignModeHandler_Call) Return(_a0 *txsigning.HandlerMap) *MockTxConfig_SignModeHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTxConfig_SignModeHandler_Call) RunAndReturn(run func() *txsigning.HandlerMap) *MockTxConfig_SignModeHandler_Call {
	_c.Call.Return(run)
	return _c
}

// SigningContext provides a mock function with given fields:
func (_m *MockTxConfig) SigningContext() *txsigning.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SigningContext")
	}

	var r0 *txsigning.Context
	if rf, ok := ret.Get(0).(func() *txsigning.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*txsigning.Context)
		}
	}

	return r0
}

// MockTxConfig_SigningContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SigningContext'
type MockTxConfig_SigningContext_Call struct {
	*mock.Call
}

// SigningContext is a helper method to define mock.On call
func (_e *MockTxConfig_Expecter) SigningContext() *MockTxConfig_SigningContext_Call {
	return &MockTxConfig_SigningContext_Call{Call: _e.mock.On("SigningContext")}
}

func (_c *MockTxConfig_SigningContext_Call) Run(run func()) *MockTxConfig_SigningContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTxConfig_SigningContext_Call) Return(_a0 *txsigning.Context) *MockTxConfig_SigningContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTxConfig_SigningContext_Call) RunAndReturn(run func() *txsigning.Context) *MockTxConfig_SigningContext_Call {
	_c.Call.Return(run)
	return _c
}

// TxDecoder provides a mock function with given fields:
func (_m *MockTxConfig) TxDecoder() types.TxDecoder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxDecoder")
	}

	var r0 types.TxDecoder
	if rf, ok := ret.Get(0).(func() types.TxDecoder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.TxDecoder)
		}
	}

	return r0
}

// MockTxConfig_TxDecoder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxDecoder'
type MockTxConfig_TxDecoder_Call struct {
	*mock.Call
}

// TxDecoder is a helper method to define mock.On call
func (_e *MockTxConfig_Expecter) TxDecoder() *MockTxConfig_TxDecoder_Call {
	return &MockTxConfig_TxDecoder_Call{Call: _e.mock.On("TxDecoder")}
}

func (_c *MockTxConfig_TxDecoder_Call) Run(run func()) *MockTxConfig_TxDecoder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTxConfig_TxDecoder_Call) Return(_a0 types.TxDecoder) *MockTxConfig_TxDecoder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTxConfig_TxDecoder_Call) RunAndReturn(run func() types.TxDecoder) *MockTxConfig_TxDecoder_Call {
	_c.Call.Return(run)
	return _c
}

// TxEncoder provides a mock function with given fields:
func (_m *MockTxConfig) TxEncoder() types.TxEncoder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxEncoder")
	}

	var r0 types.TxEncoder
	if rf, ok := ret.Get(0).(func() types.TxEncoder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.TxEncoder)
		}
	}

	return r0
}

// MockTxConfig_TxEncoder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxEncoder'
type MockTxConfig_TxEncoder_Call struct {
	*mock.Call
}

// TxEncoder is a helper method to define mock.On call
func (_e *MockTxConfig_Expecter) TxEncoder() *MockTxConfig_TxEncoder_Call {
	return &MockTxConfig_TxEncoder_Call{Call: _e.mock.On("TxEncoder")}
}

func (_c *MockTxConfig_TxEncoder_Call) Run(run func()) *MockTxConfig_TxEncoder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTxConfig_TxEncoder_Call) Return(_a0 types.TxEncoder) *MockTxConfig_TxEncoder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTxConfig_TxEncoder_Call) RunAndReturn(run func() types.TxEncoder) *MockTxConfig_TxEncoder_Call {
	_c.Call.Return(run)
	return _c
}

// TxJSONDecoder provides a mock function with given fields:
func (_m *MockTxConfig) TxJSONDecoder() types.TxDecoder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxJSONDecoder")
	}

	var r0 types.TxDecoder
	if rf, ok := ret.Get(0).(func() types.TxDecoder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.TxDecoder)
		}
	}

	return r0
}

// MockTxConfig_TxJSONDecoder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxJSONDecoder'
type MockTxConfig_TxJSONDecoder_Call struct {
	*mock.Call
}

// TxJSONDecoder is a helper method to define mock.On call
func (_e *MockTxConfig_Expecter) TxJSONDecoder() *MockTxConfig_TxJSONDecoder_Call {
	return &MockTxConfig_TxJSONDecoder_Call{Call: _e.mock.On("TxJSONDecoder")}
}

func (_c *MockTxConfig_TxJSONDecoder_Call) Run(run func()) *MockTxConfig_TxJSONDecoder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTxConfig_TxJSONDecoder_Call) Return(_a0 types.TxDecoder) *MockTxConfig_TxJSONDecoder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTxConfig_TxJSONDecoder_Call) RunAndReturn(run func() types.TxDecoder) *MockTxConfig_TxJSONDecoder_Call {
	_c.Call.Return(run)
	return _c
}

// TxJSONEncoder provides a mock function with given fields:
func (_m *MockTxConfig) TxJSONEncoder() types.TxEncoder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxJSONEncoder")
	}

	var r0 types.TxEncoder
	if rf, ok := ret.Get(0).(func() types.TxEncoder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.TxEncoder)
		}
	}

	return r0
}

// MockTxConfig_TxJSONEncoder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxJSONEncoder'
type MockTxConfig_TxJSONEncoder_Call struct {
	*mock.Call
}

// TxJSONEncoder is a helper method to define mock.On call
func (_e *MockTxConfig_Expecter) TxJSONEncoder() *MockTxConfig_TxJSONEncoder_Call {
	return &MockTxConfig_TxJSONEncoder_Call{Call: _e.mock.On("TxJSONEncoder")}
}

func (_c *MockTxConfig_TxJSONEncoder_Call) Run(run func()) *MockTxConfig_TxJSONEncoder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTxConfig_TxJSONEncoder_Call) Return(_a0 types.TxEncoder) *MockTxConfig_TxJSONEncoder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTxConfig_TxJSONEncoder_Call) RunAndReturn(run func() types.TxEncoder) *MockTxConfig_TxJSONEncoder_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalSignatureJSON provides a mock function with given fields: _a0
func (_m *MockTxConfig) UnmarshalSignatureJSON(_a0 []byte) ([]signing.SignatureV2, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalSignatureJSON")
	}

	var r0 []signing.SignatureV2
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]signing.SignatureV2, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []signing.SignatureV2); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]signing.SignatureV2)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxConfig_UnmarshalSignatureJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalSignatureJSON'
type MockTxConfig_UnmarshalSignatureJSON_Call struct {
	*mock.Call
}

// UnmarshalSignatureJSON is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockTxConfig_Expecter) UnmarshalSignatureJSON(_a0 interface{}) *MockTxConfig_UnmarshalSignatureJSON_Call {
	return &MockTxConfig_UnmarshalSignatureJSON_Call{Call: _e.mock.On("UnmarshalSignatureJSON", _a0)}
}

func (_c *MockTxConfig_UnmarshalSignatureJSON_Call) Run(run func(_a0 []byte)) *MockTxConfig_UnmarshalSignatureJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockTxConfig_UnmarshalSignatureJSON_Call) Return(_a0 []signing.SignatureV2, _a1 error) *MockTxConfig_UnmarshalSignatureJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTxConfig_UnmarshalSignatureJSON_Call) RunAndReturn(run func([]byte) ([]signing.SignatureV2, error)) *MockTxConfig_UnmarshalSignatureJSON_Call {
	_c.Call.Return(run)
	return _c
}

// WrapTxBuilder provides a mock function with given fields: _a0
func (_m *MockTxConfig) WrapTxBuilder(_a0 types.Tx) (client.TxBuilder, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WrapTxBuilder")
	}

	var r0 client.TxBuilder
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Tx) (client.TxBuilder, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.Tx) client.TxBuilder); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.TxBuilder)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Tx) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxConfig_WrapTxBuilder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WrapTxBuilder'
type MockTxConfig_WrapTxBuilder_Call struct {
	*mock.Call
}

// WrapTxBuilder is a helper method to define mock.On call
//   - _a0 types.Tx
func (_e *MockTxConfig_Expecter) WrapTxBuilder(_a0 interface{}) *MockTxConfig_WrapTxBuilder_Call {
	return &MockTxConfig_WrapTxBuilder_Call{Call: _e.mock.On("WrapTxBuilder", _a0)}
}

func (_c *MockTxConfig_WrapTxBuilder_Call) Run(run func(_a0 types.Tx)) *MockTxConfig_WrapTxBuilder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Tx))
	})
	return _c
}

func (_c *MockTxConfig_WrapTxBuilder_Call) Return(_a0 client.TxBuilder, _a1 error) *MockTxConfig_WrapTxBuilder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTxConfig_WrapTxBuilder_Call) RunAndReturn(run func(types.Tx) (client.TxBuilder, error)) *MockTxConfig_WrapTxBuilder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTxConfig creates a new instance of MockTxConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTxConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTxConfig {
	mock := &MockTxConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
