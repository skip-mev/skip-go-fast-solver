// Code generated by mockery v2.46.2. DO NOT EDIT.

package evmrpc

import (
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"
	context "golang.org/x/net/context"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	ethereum "github.com/ethereum/go-ethereum"

	evmrpc "github.com/skip-mev/go-fast-solver/shared/evmrpc"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// MockEVMChainRPC is an autogenerated mock type for the EVMChainRPC type
type MockEVMChainRPC struct {
	mock.Mock
}

type MockEVMChainRPC_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEVMChainRPC) EXPECT() *MockEVMChainRPC_Expecter {
	return &MockEVMChainRPC_Expecter{mock: &_m.Mock}
}

// BlockByHash provides a mock function with given fields: ctx, hash
func (_m *MockEVMChainRPC) BlockByHash(ctx context.Context, hash common.Hash) (*types.Block, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for BlockByHash")
	}

	var r0 *types.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (*types.Block, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *types.Block); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_BlockByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockByHash'
type MockEVMChainRPC_BlockByHash_Call struct {
	*mock.Call
}

// BlockByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash common.Hash
func (_e *MockEVMChainRPC_Expecter) BlockByHash(ctx interface{}, hash interface{}) *MockEVMChainRPC_BlockByHash_Call {
	return &MockEVMChainRPC_BlockByHash_Call{Call: _e.mock.On("BlockByHash", ctx, hash)}
}

func (_c *MockEVMChainRPC_BlockByHash_Call) Run(run func(ctx context.Context, hash common.Hash)) *MockEVMChainRPC_BlockByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *MockEVMChainRPC_BlockByHash_Call) Return(_a0 *types.Block, _a1 error) *MockEVMChainRPC_BlockByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_BlockByHash_Call) RunAndReturn(run func(context.Context, common.Hash) (*types.Block, error)) *MockEVMChainRPC_BlockByHash_Call {
	_c.Call.Return(run)
	return _c
}

// CallContract provides a mock function with given fields: ctx, call, blockNumber
func (_m *MockEVMChainRPC) CallContract(ctx context.Context, call ethereum.CallMsg, blockNumber *big.Int) ([]byte, error) {
	ret := _m.Called(ctx, call, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for CallContract")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.CallMsg, *big.Int) ([]byte, error)); ok {
		return rf(ctx, call, blockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.CallMsg, *big.Int) []byte); ok {
		r0 = rf(ctx, call, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ethereum.CallMsg, *big.Int) error); ok {
		r1 = rf(ctx, call, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_CallContract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallContract'
type MockEVMChainRPC_CallContract_Call struct {
	*mock.Call
}

// CallContract is a helper method to define mock.On call
//   - ctx context.Context
//   - call ethereum.CallMsg
//   - blockNumber *big.Int
func (_e *MockEVMChainRPC_Expecter) CallContract(ctx interface{}, call interface{}, blockNumber interface{}) *MockEVMChainRPC_CallContract_Call {
	return &MockEVMChainRPC_CallContract_Call{Call: _e.mock.On("CallContract", ctx, call, blockNumber)}
}

func (_c *MockEVMChainRPC_CallContract_Call) Run(run func(ctx context.Context, call ethereum.CallMsg, blockNumber *big.Int)) *MockEVMChainRPC_CallContract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ethereum.CallMsg), args[2].(*big.Int))
	})
	return _c
}

func (_c *MockEVMChainRPC_CallContract_Call) Return(_a0 []byte, _a1 error) *MockEVMChainRPC_CallContract_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_CallContract_Call) RunAndReturn(run func(context.Context, ethereum.CallMsg, *big.Int) ([]byte, error)) *MockEVMChainRPC_CallContract_Call {
	_c.Call.Return(run)
	return _c
}

// Client provides a mock function with given fields:
func (_m *MockEVMChainRPC) Client() *ethclient.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 *ethclient.Client
	if rf, ok := ret.Get(0).(func() *ethclient.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ethclient.Client)
		}
	}

	return r0
}

// MockEVMChainRPC_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type MockEVMChainRPC_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *MockEVMChainRPC_Expecter) Client() *MockEVMChainRPC_Client_Call {
	return &MockEVMChainRPC_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *MockEVMChainRPC_Client_Call) Run(run func()) *MockEVMChainRPC_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEVMChainRPC_Client_Call) Return(_a0 *ethclient.Client) *MockEVMChainRPC_Client_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEVMChainRPC_Client_Call) RunAndReturn(run func() *ethclient.Client) *MockEVMChainRPC_Client_Call {
	_c.Call.Return(run)
	return _c
}

// CodeAt provides a mock function with given fields: ctx, address, blockHeight
func (_m *MockEVMChainRPC) CodeAt(ctx context.Context, address common.Address, blockHeight *big.Int) ([]byte, error) {
	ret := _m.Called(ctx, address, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for CodeAt")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, *big.Int) ([]byte, error)); ok {
		return rf(ctx, address, blockHeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, *big.Int) []byte); ok {
		r0 = rf(ctx, address, blockHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address, *big.Int) error); ok {
		r1 = rf(ctx, address, blockHeight)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_CodeAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CodeAt'
type MockEVMChainRPC_CodeAt_Call struct {
	*mock.Call
}

// CodeAt is a helper method to define mock.On call
//   - ctx context.Context
//   - address common.Address
//   - blockHeight *big.Int
func (_e *MockEVMChainRPC_Expecter) CodeAt(ctx interface{}, address interface{}, blockHeight interface{}) *MockEVMChainRPC_CodeAt_Call {
	return &MockEVMChainRPC_CodeAt_Call{Call: _e.mock.On("CodeAt", ctx, address, blockHeight)}
}

func (_c *MockEVMChainRPC_CodeAt_Call) Run(run func(ctx context.Context, address common.Address, blockHeight *big.Int)) *MockEVMChainRPC_CodeAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Address), args[2].(*big.Int))
	})
	return _c
}

func (_c *MockEVMChainRPC_CodeAt_Call) Return(_a0 []byte, _a1 error) *MockEVMChainRPC_CodeAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_CodeAt_Call) RunAndReturn(run func(context.Context, common.Address, *big.Int) ([]byte, error)) *MockEVMChainRPC_CodeAt_Call {
	_c.Call.Return(run)
	return _c
}

// EstimateGas provides a mock function with given fields: ctx, msg
func (_m *MockEVMChainRPC) EstimateGas(ctx context.Context, msg ethereum.CallMsg) (uint64, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for EstimateGas")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.CallMsg) (uint64, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.CallMsg) uint64); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ethereum.CallMsg) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_EstimateGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateGas'
type MockEVMChainRPC_EstimateGas_Call struct {
	*mock.Call
}

// EstimateGas is a helper method to define mock.On call
//   - ctx context.Context
//   - msg ethereum.CallMsg
func (_e *MockEVMChainRPC_Expecter) EstimateGas(ctx interface{}, msg interface{}) *MockEVMChainRPC_EstimateGas_Call {
	return &MockEVMChainRPC_EstimateGas_Call{Call: _e.mock.On("EstimateGas", ctx, msg)}
}

func (_c *MockEVMChainRPC_EstimateGas_Call) Run(run func(ctx context.Context, msg ethereum.CallMsg)) *MockEVMChainRPC_EstimateGas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ethereum.CallMsg))
	})
	return _c
}

func (_c *MockEVMChainRPC_EstimateGas_Call) Return(_a0 uint64, _a1 error) *MockEVMChainRPC_EstimateGas_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_EstimateGas_Call) RunAndReturn(run func(context.Context, ethereum.CallMsg) (uint64, error)) *MockEVMChainRPC_EstimateGas_Call {
	_c.Call.Return(run)
	return _c
}

// GetERC20Transfers provides a mock function with given fields: ctx, txHash
func (_m *MockEVMChainRPC) GetERC20Transfers(ctx context.Context, txHash string) ([]evmrpc.ERC20Transfer, error) {
	ret := _m.Called(ctx, txHash)

	if len(ret) == 0 {
		panic("no return value specified for GetERC20Transfers")
	}

	var r0 []evmrpc.ERC20Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]evmrpc.ERC20Transfer, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []evmrpc.ERC20Transfer); ok {
		r0 = rf(ctx, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]evmrpc.ERC20Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_GetERC20Transfers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetERC20Transfers'
type MockEVMChainRPC_GetERC20Transfers_Call struct {
	*mock.Call
}

// GetERC20Transfers is a helper method to define mock.On call
//   - ctx context.Context
//   - txHash string
func (_e *MockEVMChainRPC_Expecter) GetERC20Transfers(ctx interface{}, txHash interface{}) *MockEVMChainRPC_GetERC20Transfers_Call {
	return &MockEVMChainRPC_GetERC20Transfers_Call{Call: _e.mock.On("GetERC20Transfers", ctx, txHash)}
}

func (_c *MockEVMChainRPC_GetERC20Transfers_Call) Run(run func(ctx context.Context, txHash string)) *MockEVMChainRPC_GetERC20Transfers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEVMChainRPC_GetERC20Transfers_Call) Return(_a0 []evmrpc.ERC20Transfer, _a1 error) *MockEVMChainRPC_GetERC20Transfers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_GetERC20Transfers_Call) RunAndReturn(run func(context.Context, string) ([]evmrpc.ERC20Transfer, error)) *MockEVMChainRPC_GetERC20Transfers_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function with given fields: ctx, topics, addresses
func (_m *MockEVMChainRPC) GetLogs(ctx context.Context, topics [][]common.Hash, addresses []common.Address) ([]types.Log, error) {
	ret := _m.Called(ctx, topics, addresses)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 []types.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]common.Hash, []common.Address) ([]types.Log, error)); ok {
		return rf(ctx, topics, addresses)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]common.Hash, []common.Address) []types.Log); ok {
		r0 = rf(ctx, topics, addresses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]common.Hash, []common.Address) error); ok {
		r1 = rf(ctx, topics, addresses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type MockEVMChainRPC_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - topics [][]common.Hash
//   - addresses []common.Address
func (_e *MockEVMChainRPC_Expecter) GetLogs(ctx interface{}, topics interface{}, addresses interface{}) *MockEVMChainRPC_GetLogs_Call {
	return &MockEVMChainRPC_GetLogs_Call{Call: _e.mock.On("GetLogs", ctx, topics, addresses)}
}

func (_c *MockEVMChainRPC_GetLogs_Call) Run(run func(ctx context.Context, topics [][]common.Hash, addresses []common.Address)) *MockEVMChainRPC_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]common.Hash), args[2].([]common.Address))
	})
	return _c
}

func (_c *MockEVMChainRPC_GetLogs_Call) Return(_a0 []types.Log, _a1 error) *MockEVMChainRPC_GetLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_GetLogs_Call) RunAndReturn(run func(context.Context, [][]common.Hash, []common.Address) ([]types.Log, error)) *MockEVMChainRPC_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxByHash provides a mock function with given fields: ctx, txHash
func (_m *MockEVMChainRPC) GetTxByHash(ctx context.Context, txHash string) (*types.Transaction, bool, error) {
	ret := _m.Called(ctx, txHash)

	if len(ret) == 0 {
		panic("no return value specified for GetTxByHash")
	}

	var r0 *types.Transaction
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Transaction, bool, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Transaction); ok {
		r0 = rf(ctx, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, txHash)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, txHash)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockEVMChainRPC_GetTxByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxByHash'
type MockEVMChainRPC_GetTxByHash_Call struct {
	*mock.Call
}

// GetTxByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - txHash string
func (_e *MockEVMChainRPC_Expecter) GetTxByHash(ctx interface{}, txHash interface{}) *MockEVMChainRPC_GetTxByHash_Call {
	return &MockEVMChainRPC_GetTxByHash_Call{Call: _e.mock.On("GetTxByHash", ctx, txHash)}
}

func (_c *MockEVMChainRPC_GetTxByHash_Call) Run(run func(ctx context.Context, txHash string)) *MockEVMChainRPC_GetTxByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEVMChainRPC_GetTxByHash_Call) Return(_a0 *types.Transaction, _a1 bool, _a2 error) *MockEVMChainRPC_GetTxByHash_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockEVMChainRPC_GetTxByHash_Call) RunAndReturn(run func(context.Context, string) (*types.Transaction, bool, error)) *MockEVMChainRPC_GetTxByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxReceipt provides a mock function with given fields: ctx, txHash
func (_m *MockEVMChainRPC) GetTxReceipt(ctx context.Context, txHash string) (*types.Receipt, error) {
	ret := _m.Called(ctx, txHash)

	if len(ret) == 0 {
		panic("no return value specified for GetTxReceipt")
	}

	var r0 *types.Receipt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Receipt, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Receipt); ok {
		r0 = rf(ctx, txHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Receipt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_GetTxReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxReceipt'
type MockEVMChainRPC_GetTxReceipt_Call struct {
	*mock.Call
}

// GetTxReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - txHash string
func (_e *MockEVMChainRPC_Expecter) GetTxReceipt(ctx interface{}, txHash interface{}) *MockEVMChainRPC_GetTxReceipt_Call {
	return &MockEVMChainRPC_GetTxReceipt_Call{Call: _e.mock.On("GetTxReceipt", ctx, txHash)}
}

func (_c *MockEVMChainRPC_GetTxReceipt_Call) Run(run func(ctx context.Context, txHash string)) *MockEVMChainRPC_GetTxReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEVMChainRPC_GetTxReceipt_Call) Return(_a0 *types.Receipt, _a1 error) *MockEVMChainRPC_GetTxReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_GetTxReceipt_Call) RunAndReturn(run func(context.Context, string) (*types.Receipt, error)) *MockEVMChainRPC_GetTxReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// GetUSDCBalance provides a mock function with given fields: ctx, contractAddress, account
func (_m *MockEVMChainRPC) GetUSDCBalance(ctx context.Context, contractAddress string, account string) (*big.Int, error) {
	ret := _m.Called(ctx, contractAddress, account)

	if len(ret) == 0 {
		panic("no return value specified for GetUSDCBalance")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*big.Int, error)); ok {
		return rf(ctx, contractAddress, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *big.Int); ok {
		r0 = rf(ctx, contractAddress, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, contractAddress, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_GetUSDCBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUSDCBalance'
type MockEVMChainRPC_GetUSDCBalance_Call struct {
	*mock.Call
}

// GetUSDCBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - contractAddress string
//   - account string
func (_e *MockEVMChainRPC_Expecter) GetUSDCBalance(ctx interface{}, contractAddress interface{}, account interface{}) *MockEVMChainRPC_GetUSDCBalance_Call {
	return &MockEVMChainRPC_GetUSDCBalance_Call{Call: _e.mock.On("GetUSDCBalance", ctx, contractAddress, account)}
}

func (_c *MockEVMChainRPC_GetUSDCBalance_Call) Run(run func(ctx context.Context, contractAddress string, account string)) *MockEVMChainRPC_GetUSDCBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockEVMChainRPC_GetUSDCBalance_Call) Return(_a0 *big.Int, _a1 error) *MockEVMChainRPC_GetUSDCBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_GetUSDCBalance_Call) RunAndReturn(run func(context.Context, string, string) (*big.Int, error)) *MockEVMChainRPC_GetUSDCBalance_Call {
	_c.Call.Return(run)
	return _c
}

// HeaderByHash provides a mock function with given fields: ctx, hash
func (_m *MockEVMChainRPC) HeaderByHash(ctx context.Context, hash common.Hash) (*types.Header, error) {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for HeaderByHash")
	}

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (*types.Header, error)); ok {
		return rf(ctx, hash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *types.Header); ok {
		r0 = rf(ctx, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_HeaderByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderByHash'
type MockEVMChainRPC_HeaderByHash_Call struct {
	*mock.Call
}

// HeaderByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash common.Hash
func (_e *MockEVMChainRPC_Expecter) HeaderByHash(ctx interface{}, hash interface{}) *MockEVMChainRPC_HeaderByHash_Call {
	return &MockEVMChainRPC_HeaderByHash_Call{Call: _e.mock.On("HeaderByHash", ctx, hash)}
}

func (_c *MockEVMChainRPC_HeaderByHash_Call) Run(run func(ctx context.Context, hash common.Hash)) *MockEVMChainRPC_HeaderByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *MockEVMChainRPC_HeaderByHash_Call) Return(_a0 *types.Header, _a1 error) *MockEVMChainRPC_HeaderByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_HeaderByHash_Call) RunAndReturn(run func(context.Context, common.Hash) (*types.Header, error)) *MockEVMChainRPC_HeaderByHash_Call {
	_c.Call.Return(run)
	return _c
}

// HeaderByNumber provides a mock function with given fields: ctx, number
func (_m *MockEVMChainRPC) HeaderByNumber(ctx context.Context, number *big.Int) (*types.Header, error) {
	ret := _m.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for HeaderByNumber")
	}

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) (*types.Header, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) *types.Header); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_HeaderByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderByNumber'
type MockEVMChainRPC_HeaderByNumber_Call struct {
	*mock.Call
}

// HeaderByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - number *big.Int
func (_e *MockEVMChainRPC_Expecter) HeaderByNumber(ctx interface{}, number interface{}) *MockEVMChainRPC_HeaderByNumber_Call {
	return &MockEVMChainRPC_HeaderByNumber_Call{Call: _e.mock.On("HeaderByNumber", ctx, number)}
}

func (_c *MockEVMChainRPC_HeaderByNumber_Call) Run(run func(ctx context.Context, number *big.Int)) *MockEVMChainRPC_HeaderByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*big.Int))
	})
	return _c
}

func (_c *MockEVMChainRPC_HeaderByNumber_Call) Return(_a0 *types.Header, _a1 error) *MockEVMChainRPC_HeaderByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_HeaderByNumber_Call) RunAndReturn(run func(context.Context, *big.Int) (*types.Header, error)) *MockEVMChainRPC_HeaderByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// PendingNonceAt provides a mock function with given fields: ctx, address
func (_m *MockEVMChainRPC) PendingNonceAt(ctx context.Context, address common.Address) (uint64, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for PendingNonceAt")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) (uint64, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Address) uint64); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Address) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_PendingNonceAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PendingNonceAt'
type MockEVMChainRPC_PendingNonceAt_Call struct {
	*mock.Call
}

// PendingNonceAt is a helper method to define mock.On call
//   - ctx context.Context
//   - address common.Address
func (_e *MockEVMChainRPC_Expecter) PendingNonceAt(ctx interface{}, address interface{}) *MockEVMChainRPC_PendingNonceAt_Call {
	return &MockEVMChainRPC_PendingNonceAt_Call{Call: _e.mock.On("PendingNonceAt", ctx, address)}
}

func (_c *MockEVMChainRPC_PendingNonceAt_Call) Run(run func(ctx context.Context, address common.Address)) *MockEVMChainRPC_PendingNonceAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Address))
	})
	return _c
}

func (_c *MockEVMChainRPC_PendingNonceAt_Call) Return(_a0 uint64, _a1 error) *MockEVMChainRPC_PendingNonceAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_PendingNonceAt_Call) RunAndReturn(run func(context.Context, common.Address) (uint64, error)) *MockEVMChainRPC_PendingNonceAt_Call {
	_c.Call.Return(run)
	return _c
}

// SendTx provides a mock function with given fields: ctx, txBytes
func (_m *MockEVMChainRPC) SendTx(ctx context.Context, txBytes []byte) (string, error) {
	ret := _m.Called(ctx, txBytes)

	if len(ret) == 0 {
		panic("no return value specified for SendTx")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (string, error)); ok {
		return rf(ctx, txBytes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) string); ok {
		r0 = rf(ctx, txBytes)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, txBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_SendTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTx'
type MockEVMChainRPC_SendTx_Call struct {
	*mock.Call
}

// SendTx is a helper method to define mock.On call
//   - ctx context.Context
//   - txBytes []byte
func (_e *MockEVMChainRPC_Expecter) SendTx(ctx interface{}, txBytes interface{}) *MockEVMChainRPC_SendTx_Call {
	return &MockEVMChainRPC_SendTx_Call{Call: _e.mock.On("SendTx", ctx, txBytes)}
}

func (_c *MockEVMChainRPC_SendTx_Call) Run(run func(ctx context.Context, txBytes []byte)) *MockEVMChainRPC_SendTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *MockEVMChainRPC_SendTx_Call) Return(_a0 string, _a1 error) *MockEVMChainRPC_SendTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_SendTx_Call) RunAndReturn(run func(context.Context, []byte) (string, error)) *MockEVMChainRPC_SendTx_Call {
	_c.Call.Return(run)
	return _c
}

// SuggestGasPrice provides a mock function with given fields: ctx
func (_m *MockEVMChainRPC) SuggestGasPrice(ctx context.Context) (*big.Int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuggestGasPrice")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*big.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_SuggestGasPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuggestGasPrice'
type MockEVMChainRPC_SuggestGasPrice_Call struct {
	*mock.Call
}

// SuggestGasPrice is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEVMChainRPC_Expecter) SuggestGasPrice(ctx interface{}) *MockEVMChainRPC_SuggestGasPrice_Call {
	return &MockEVMChainRPC_SuggestGasPrice_Call{Call: _e.mock.On("SuggestGasPrice", ctx)}
}

func (_c *MockEVMChainRPC_SuggestGasPrice_Call) Run(run func(ctx context.Context)) *MockEVMChainRPC_SuggestGasPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEVMChainRPC_SuggestGasPrice_Call) Return(_a0 *big.Int, _a1 error) *MockEVMChainRPC_SuggestGasPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_SuggestGasPrice_Call) RunAndReturn(run func(context.Context) (*big.Int, error)) *MockEVMChainRPC_SuggestGasPrice_Call {
	_c.Call.Return(run)
	return _c
}

// SuggestGasTipCap provides a mock function with given fields: ctx
func (_m *MockEVMChainRPC) SuggestGasTipCap(ctx context.Context) (*big.Int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuggestGasTipCap")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*big.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMChainRPC_SuggestGasTipCap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuggestGasTipCap'
type MockEVMChainRPC_SuggestGasTipCap_Call struct {
	*mock.Call
}

// SuggestGasTipCap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEVMChainRPC_Expecter) SuggestGasTipCap(ctx interface{}) *MockEVMChainRPC_SuggestGasTipCap_Call {
	return &MockEVMChainRPC_SuggestGasTipCap_Call{Call: _e.mock.On("SuggestGasTipCap", ctx)}
}

func (_c *MockEVMChainRPC_SuggestGasTipCap_Call) Run(run func(ctx context.Context)) *MockEVMChainRPC_SuggestGasTipCap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEVMChainRPC_SuggestGasTipCap_Call) Return(_a0 *big.Int, _a1 error) *MockEVMChainRPC_SuggestGasTipCap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMChainRPC_SuggestGasTipCap_Call) RunAndReturn(run func(context.Context) (*big.Int, error)) *MockEVMChainRPC_SuggestGasTipCap_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEVMChainRPC creates a new instance of MockEVMChainRPC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEVMChainRPC(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEVMChainRPC {
	mock := &MockEVMChainRPC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
