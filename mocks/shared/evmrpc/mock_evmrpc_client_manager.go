// Code generated by mockery v2.46.3. DO NOT EDIT.

package evmrpc

import (
	context "context"

	evmrpc "github.com/skip-mev/go-fast-solver/shared/evmrpc"
	mock "github.com/stretchr/testify/mock"
)

// MockEVMRPCClientManager is an autogenerated mock type for the EVMRPCClientManager type
type MockEVMRPCClientManager struct {
	mock.Mock
}

type MockEVMRPCClientManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEVMRPCClientManager) EXPECT() *MockEVMRPCClientManager_Expecter {
	return &MockEVMRPCClientManager_Expecter{mock: &_m.Mock}
}

// GetClient provides a mock function with given fields: ctx, chainID
func (_m *MockEVMRPCClientManager) GetClient(ctx context.Context, chainID string) (evmrpc.EVMChainRPC, error) {
	ret := _m.Called(ctx, chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 evmrpc.EVMChainRPC
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (evmrpc.EVMChainRPC, error)); ok {
		return rf(ctx, chainID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) evmrpc.EVMChainRPC); ok {
		r0 = rf(ctx, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(evmrpc.EVMChainRPC)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMRPCClientManager_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockEVMRPCClientManager_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
//   - ctx context.Context
//   - chainID string
func (_e *MockEVMRPCClientManager_Expecter) GetClient(ctx interface{}, chainID interface{}) *MockEVMRPCClientManager_GetClient_Call {
	return &MockEVMRPCClientManager_GetClient_Call{Call: _e.mock.On("GetClient", ctx, chainID)}
}

func (_c *MockEVMRPCClientManager_GetClient_Call) Run(run func(ctx context.Context, chainID string)) *MockEVMRPCClientManager_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEVMRPCClientManager_GetClient_Call) Return(_a0 evmrpc.EVMChainRPC, _a1 error) *MockEVMRPCClientManager_GetClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEVMRPCClientManager_GetClient_Call) RunAndReturn(run func(context.Context, string) (evmrpc.EVMChainRPC, error)) *MockEVMRPCClientManager_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEVMRPCClientManager creates a new instance of MockEVMRPCClientManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEVMRPCClientManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEVMRPCClientManager {
	mock := &MockEVMRPCClientManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
