// Code generated by mockery v2.47.0. DO NOT EDIT.

package evmrpc

import (
	context "context"
	big "math/big"

	types "github.com/ethereum/go-ethereum/core/types"
	mock "github.com/stretchr/testify/mock"
)

// MockOracle is an autogenerated mock type for the Oracle type
type MockOracle struct {
	mock.Mock
}

type MockOracle_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOracle) EXPECT() *MockOracle_Expecter {
	return &MockOracle_Expecter{mock: &_m.Mock}
}

// TxFeeUUSDC provides a mock function with given fields: ctx, tx, chainID
func (_m *MockOracle) TxFeeUUSDC(ctx context.Context, tx *types.Transaction, chainID string) (*big.Int, error) {
	ret := _m.Called(ctx, tx, chainID)

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Transaction, string) (*big.Int, error)); ok {
		return rf(ctx, tx, chainID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Transaction, string) *big.Int); ok {
		r0 = rf(ctx, tx, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Transaction, string) error); ok {
		r1 = rf(ctx, tx, chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockEVMTxExecutor creates a new instance of MockEVMTxExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOracle(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOracle {
	mock := &MockOracle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

