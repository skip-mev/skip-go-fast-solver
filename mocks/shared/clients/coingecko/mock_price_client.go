// Code generated by mockery v2.46.3. DO NOT EDIT.

package coingecko

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockPriceClient is an autogenerated mock type for the PriceClient type
type MockPriceClient struct {
	mock.Mock
}

type MockPriceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPriceClient) EXPECT() *MockPriceClient_Expecter {
	return &MockPriceClient_Expecter{mock: &_m.Mock}
}

// GetSimplePrice provides a mock function with given fields: ctx, coingeckoID, currency
func (_m *MockPriceClient) GetSimplePrice(ctx context.Context, coingeckoID string, currency string) (float64, error) {
	ret := _m.Called(ctx, coingeckoID, currency)

	if len(ret) == 0 {
		panic("no return value specified for GetSimplePrice")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (float64, error)); ok {
		return rf(ctx, coingeckoID, currency)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) float64); ok {
		r0 = rf(ctx, coingeckoID, currency)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, coingeckoID, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPriceClient_GetSimplePrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSimplePrice'
type MockPriceClient_GetSimplePrice_Call struct {
	*mock.Call
}

// GetSimplePrice is a helper method to define mock.On call
//   - ctx context.Context
//   - coingeckoID string
//   - currency string
func (_e *MockPriceClient_Expecter) GetSimplePrice(ctx interface{}, coingeckoID interface{}, currency interface{}) *MockPriceClient_GetSimplePrice_Call {
	return &MockPriceClient_GetSimplePrice_Call{Call: _e.mock.On("GetSimplePrice", ctx, coingeckoID, currency)}
}

func (_c *MockPriceClient_GetSimplePrice_Call) Run(run func(ctx context.Context, coingeckoID string, currency string)) *MockPriceClient_GetSimplePrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPriceClient_GetSimplePrice_Call) Return(_a0 float64, _a1 error) *MockPriceClient_GetSimplePrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPriceClient_GetSimplePrice_Call) RunAndReturn(run func(context.Context, string, string) (float64, error)) *MockPriceClient_GetSimplePrice_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPriceClient creates a new instance of MockPriceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPriceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPriceClient {
	mock := &MockPriceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
