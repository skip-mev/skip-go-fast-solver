// Code generated by mockery v2.46.3. DO NOT EDIT.

package signing

import (
	context "context"

	signing "github.com/skip-mev/go-fast-solver/shared/signing"
	mock "github.com/stretchr/testify/mock"
)

// MockSigner is an autogenerated mock type for the Signer type
type MockSigner struct {
	mock.Mock
}

type MockSigner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSigner) EXPECT() *MockSigner_Expecter {
	return &MockSigner_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with given fields:
func (_m *MockSigner) Address() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockSigner_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type MockSigner_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *MockSigner_Expecter) Address() *MockSigner_Address_Call {
	return &MockSigner_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *MockSigner_Address_Call) Run(run func()) *MockSigner_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSigner_Address_Call) Return(_a0 []byte) *MockSigner_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSigner_Address_Call) RunAndReturn(run func() []byte) *MockSigner_Address_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: _a0, chainID, tx
func (_m *MockSigner) Sign(_a0 context.Context, chainID string, tx signing.Transaction) (signing.Transaction, error) {
	ret := _m.Called(_a0, chainID, tx)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 signing.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, signing.Transaction) (signing.Transaction, error)); ok {
		return rf(_a0, chainID, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, signing.Transaction) signing.Transaction); ok {
		r0 = rf(_a0, chainID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(signing.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, signing.Transaction) error); ok {
		r1 = rf(_a0, chainID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSigner_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type MockSigner_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - _a0 context.Context
//   - chainID string
//   - tx signing.Transaction
func (_e *MockSigner_Expecter) Sign(_a0 interface{}, chainID interface{}, tx interface{}) *MockSigner_Sign_Call {
	return &MockSigner_Sign_Call{Call: _e.mock.On("Sign", _a0, chainID, tx)}
}

func (_c *MockSigner_Sign_Call) Run(run func(_a0 context.Context, chainID string, tx signing.Transaction)) *MockSigner_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(signing.Transaction))
	})
	return _c
}

func (_c *MockSigner_Sign_Call) Return(_a0 signing.Transaction, _a1 error) *MockSigner_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSigner_Sign_Call) RunAndReturn(run func(context.Context, string, signing.Transaction) (signing.Transaction, error)) *MockSigner_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSigner creates a new instance of MockSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSigner {
	mock := &MockSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
