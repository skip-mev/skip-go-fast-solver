// Code generated by mockery v2.46.3. DO NOT EDIT.

package evm

import (
	context "context"

	evm "github.com/skip-mev/go-fast-solver/shared/signing/evm"
	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// MockBuilder is an autogenerated mock type for the Builder type
type MockBuilder struct {
	mock.Mock
}

type MockBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBuilder) EXPECT() *MockBuilder_Expecter {
	return &MockBuilder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: ctx, opts
func (_m *MockBuilder) Build(ctx context.Context, opts ...evm.TxBuildOption) (*types.Transaction, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...evm.TxBuildOption) (*types.Transaction, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...evm.TxBuildOption) *types.Transaction); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...evm.TxBuildOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...evm.TxBuildOption
func (_e *MockBuilder_Expecter) Build(ctx interface{}, opts ...interface{}) *MockBuilder_Build_Call {
	return &MockBuilder_Build_Call{Call: _e.mock.On("Build",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockBuilder_Build_Call) Run(run func(ctx context.Context, opts ...evm.TxBuildOption)) *MockBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]evm.TxBuildOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(evm.TxBuildOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockBuilder_Build_Call) Return(_a0 *types.Transaction, _a1 error) *MockBuilder_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBuilder_Build_Call) RunAndReturn(run func(context.Context, ...evm.TxBuildOption) (*types.Transaction, error)) *MockBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBuilder creates a new instance of MockBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBuilder {
	mock := &MockBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
