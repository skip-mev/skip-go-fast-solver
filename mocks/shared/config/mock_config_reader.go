// Code generated by mockery v2.46.3. DO NOT EDIT.

package config

import (
	big "math/big"

	config "github.com/skip-mev/go-fast-solver/shared/config"
	mock "github.com/stretchr/testify/mock"
)

// MockConfigReader is an autogenerated mock type for the ConfigReader type
type MockConfigReader struct {
	mock.Mock
}

type MockConfigReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigReader) EXPECT() *MockConfigReader_Expecter {
	return &MockConfigReader_Expecter{mock: &_m.Mock}
}

// Config provides a mock function with given fields:
func (_m *MockConfigReader) Config() config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 config.Config
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.Config)
	}

	return r0
}

// MockConfigReader_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type MockConfigReader_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *MockConfigReader_Expecter) Config() *MockConfigReader_Config_Call {
	return &MockConfigReader_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *MockConfigReader_Config_Call) Run(run func()) *MockConfigReader_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigReader_Config_Call) Return(_a0 config.Config) *MockConfigReader_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigReader_Config_Call) RunAndReturn(run func() config.Config) *MockConfigReader_Config_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllChainConfigsOfType provides a mock function with given fields: chainType
func (_m *MockConfigReader) GetAllChainConfigsOfType(chainType config.ChainType) ([]config.ChainConfig, error) {
	ret := _m.Called(chainType)

	if len(ret) == 0 {
		panic("no return value specified for GetAllChainConfigsOfType")
	}

	var r0 []config.ChainConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(config.ChainType) ([]config.ChainConfig, error)); ok {
		return rf(chainType)
	}
	if rf, ok := ret.Get(0).(func(config.ChainType) []config.ChainConfig); ok {
		r0 = rf(chainType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]config.ChainConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(config.ChainType) error); ok {
		r1 = rf(chainType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigReader_GetAllChainConfigsOfType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllChainConfigsOfType'
type MockConfigReader_GetAllChainConfigsOfType_Call struct {
	*mock.Call
}

// GetAllChainConfigsOfType is a helper method to define mock.On call
//   - chainType config.ChainType
func (_e *MockConfigReader_Expecter) GetAllChainConfigsOfType(chainType interface{}) *MockConfigReader_GetAllChainConfigsOfType_Call {
	return &MockConfigReader_GetAllChainConfigsOfType_Call{Call: _e.mock.On("GetAllChainConfigsOfType", chainType)}
}

func (_c *MockConfigReader_GetAllChainConfigsOfType_Call) Run(run func(chainType config.ChainType)) *MockConfigReader_GetAllChainConfigsOfType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.ChainType))
	})
	return _c
}

func (_c *MockConfigReader_GetAllChainConfigsOfType_Call) Return(_a0 []config.ChainConfig, _a1 error) *MockConfigReader_GetAllChainConfigsOfType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigReader_GetAllChainConfigsOfType_Call) RunAndReturn(run func(config.ChainType) ([]config.ChainConfig, error)) *MockConfigReader_GetAllChainConfigsOfType_Call {
	_c.Call.Return(run)
	return _c
}

// GetBasicAuth provides a mock function with given fields: chainID
func (_m *MockConfigReader) GetBasicAuth(chainID string) (*string, error) {
	ret := _m.Called(chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetBasicAuth")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*string, error)); ok {
		return rf(chainID)
	}
	if rf, ok := ret.Get(0).(func(string) *string); ok {
		r0 = rf(chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigReader_GetBasicAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBasicAuth'
type MockConfigReader_GetBasicAuth_Call struct {
	*mock.Call
}

// GetBasicAuth is a helper method to define mock.On call
//   - chainID string
func (_e *MockConfigReader_Expecter) GetBasicAuth(chainID interface{}) *MockConfigReader_GetBasicAuth_Call {
	return &MockConfigReader_GetBasicAuth_Call{Call: _e.mock.On("GetBasicAuth", chainID)}
}

func (_c *MockConfigReader_GetBasicAuth_Call) Run(run func(chainID string)) *MockConfigReader_GetBasicAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfigReader_GetBasicAuth_Call) Return(_a0 *string, _a1 error) *MockConfigReader_GetBasicAuth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigReader_GetBasicAuth_Call) RunAndReturn(run func(string) (*string, error)) *MockConfigReader_GetBasicAuth_Call {
	_c.Call.Return(run)
	return _c
}

// GetChainConfig provides a mock function with given fields: chainID
func (_m *MockConfigReader) GetChainConfig(chainID string) (config.ChainConfig, error) {
	ret := _m.Called(chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetChainConfig")
	}

	var r0 config.ChainConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (config.ChainConfig, error)); ok {
		return rf(chainID)
	}
	if rf, ok := ret.Get(0).(func(string) config.ChainConfig); ok {
		r0 = rf(chainID)
	} else {
		r0 = ret.Get(0).(config.ChainConfig)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigReader_GetChainConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChainConfig'
type MockConfigReader_GetChainConfig_Call struct {
	*mock.Call
}

// GetChainConfig is a helper method to define mock.On call
//   - chainID string
func (_e *MockConfigReader_Expecter) GetChainConfig(chainID interface{}) *MockConfigReader_GetChainConfig_Call {
	return &MockConfigReader_GetChainConfig_Call{Call: _e.mock.On("GetChainConfig", chainID)}
}

func (_c *MockConfigReader_GetChainConfig_Call) Run(run func(chainID string)) *MockConfigReader_GetChainConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfigReader_GetChainConfig_Call) Return(_a0 config.ChainConfig, _a1 error) *MockConfigReader_GetChainConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigReader_GetChainConfig_Call) RunAndReturn(run func(string) (config.ChainConfig, error)) *MockConfigReader_GetChainConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetChainEnvironment provides a mock function with given fields: chainID
func (_m *MockConfigReader) GetChainEnvironment(chainID string) (config.ChainEnvironment, error) {
	ret := _m.Called(chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetChainEnvironment")
	}

	var r0 config.ChainEnvironment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (config.ChainEnvironment, error)); ok {
		return rf(chainID)
	}
	if rf, ok := ret.Get(0).(func(string) config.ChainEnvironment); ok {
		r0 = rf(chainID)
	} else {
		r0 = ret.Get(0).(config.ChainEnvironment)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigReader_GetChainEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChainEnvironment'
type MockConfigReader_GetChainEnvironment_Call struct {
	*mock.Call
}

// GetChainEnvironment is a helper method to define mock.On call
//   - chainID string
func (_e *MockConfigReader_Expecter) GetChainEnvironment(chainID interface{}) *MockConfigReader_GetChainEnvironment_Call {
	return &MockConfigReader_GetChainEnvironment_Call{Call: _e.mock.On("GetChainEnvironment", chainID)}
}

func (_c *MockConfigReader_GetChainEnvironment_Call) Run(run func(chainID string)) *MockConfigReader_GetChainEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfigReader_GetChainEnvironment_Call) Return(_a0 config.ChainEnvironment, _a1 error) *MockConfigReader_GetChainEnvironment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigReader_GetChainEnvironment_Call) RunAndReturn(run func(string) (config.ChainEnvironment, error)) *MockConfigReader_GetChainEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

// GetChainIDByHyperlaneDomain provides a mock function with given fields: domain
func (_m *MockConfigReader) GetChainIDByHyperlaneDomain(domain string) (string, error) {
	ret := _m.Called(domain)

	if len(ret) == 0 {
		panic("no return value specified for GetChainIDByHyperlaneDomain")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(domain)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigReader_GetChainIDByHyperlaneDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChainIDByHyperlaneDomain'
type MockConfigReader_GetChainIDByHyperlaneDomain_Call struct {
	*mock.Call
}

// GetChainIDByHyperlaneDomain is a helper method to define mock.On call
//   - domain string
func (_e *MockConfigReader_Expecter) GetChainIDByHyperlaneDomain(domain interface{}) *MockConfigReader_GetChainIDByHyperlaneDomain_Call {
	return &MockConfigReader_GetChainIDByHyperlaneDomain_Call{Call: _e.mock.On("GetChainIDByHyperlaneDomain", domain)}
}

func (_c *MockConfigReader_GetChainIDByHyperlaneDomain_Call) Run(run func(domain string)) *MockConfigReader_GetChainIDByHyperlaneDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfigReader_GetChainIDByHyperlaneDomain_Call) Return(_a0 string, _a1 error) *MockConfigReader_GetChainIDByHyperlaneDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigReader_GetChainIDByHyperlaneDomain_Call) RunAndReturn(run func(string) (string, error)) *MockConfigReader_GetChainIDByHyperlaneDomain_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoingeckoConfig provides a mock function with given fields:
func (_m *MockConfigReader) GetCoingeckoConfig() config.CoingeckoConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCoingeckoConfig")
	}

	var r0 config.CoingeckoConfig
	if rf, ok := ret.Get(0).(func() config.CoingeckoConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.CoingeckoConfig)
	}

	return r0
}

// MockConfigReader_GetCoingeckoConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoingeckoConfig'
type MockConfigReader_GetCoingeckoConfig_Call struct {
	*mock.Call
}

// GetCoingeckoConfig is a helper method to define mock.On call
func (_e *MockConfigReader_Expecter) GetCoingeckoConfig() *MockConfigReader_GetCoingeckoConfig_Call {
	return &MockConfigReader_GetCoingeckoConfig_Call{Call: _e.mock.On("GetCoingeckoConfig")}
}

func (_c *MockConfigReader_GetCoingeckoConfig_Call) Run(run func()) *MockConfigReader_GetCoingeckoConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigReader_GetCoingeckoConfig_Call) Return(_a0 config.CoingeckoConfig) *MockConfigReader_GetCoingeckoConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigReader_GetCoingeckoConfig_Call) RunAndReturn(run func() config.CoingeckoConfig) *MockConfigReader_GetCoingeckoConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetGasAlertThresholds provides a mock function with given fields: chainID
func (_m *MockConfigReader) GetGasAlertThresholds(chainID string) (*big.Int, *big.Int, error) {
	ret := _m.Called(chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetGasAlertThresholds")
	}

	var r0 *big.Int
	var r1 *big.Int
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*big.Int, *big.Int, error)); ok {
		return rf(chainID)
	}
	if rf, ok := ret.Get(0).(func(string) *big.Int); ok {
		r0 = rf(chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *big.Int); ok {
		r1 = rf(chainID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*big.Int)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(chainID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockConfigReader_GetGasAlertThresholds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGasAlertThresholds'
type MockConfigReader_GetGasAlertThresholds_Call struct {
	*mock.Call
}

// GetGasAlertThresholds is a helper method to define mock.On call
//   - chainID string
func (_e *MockConfigReader_Expecter) GetGasAlertThresholds(chainID interface{}) *MockConfigReader_GetGasAlertThresholds_Call {
	return &MockConfigReader_GetGasAlertThresholds_Call{Call: _e.mock.On("GetGasAlertThresholds", chainID)}
}

func (_c *MockConfigReader_GetGasAlertThresholds_Call) Run(run func(chainID string)) *MockConfigReader_GetGasAlertThresholds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfigReader_GetGasAlertThresholds_Call) Return(warningThreshold *big.Int, criticalThreshold *big.Int, err error) *MockConfigReader_GetGasAlertThresholds_Call {
	_c.Call.Return(warningThreshold, criticalThreshold, err)
	return _c
}

func (_c *MockConfigReader_GetGasAlertThresholds_Call) RunAndReturn(run func(string) (*big.Int, *big.Int, error)) *MockConfigReader_GetGasAlertThresholds_Call {
	_c.Call.Return(run)
	return _c
}

// GetGatewayContractAddress provides a mock function with given fields: chainID
func (_m *MockConfigReader) GetGatewayContractAddress(chainID string) (string, error) {
	ret := _m.Called(chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetGatewayContractAddress")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(chainID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(chainID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigReader_GetGatewayContractAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGatewayContractAddress'
type MockConfigReader_GetGatewayContractAddress_Call struct {
	*mock.Call
}

// GetGatewayContractAddress is a helper method to define mock.On call
//   - chainID string
func (_e *MockConfigReader_Expecter) GetGatewayContractAddress(chainID interface{}) *MockConfigReader_GetGatewayContractAddress_Call {
	return &MockConfigReader_GetGatewayContractAddress_Call{Call: _e.mock.On("GetGatewayContractAddress", chainID)}
}

func (_c *MockConfigReader_GetGatewayContractAddress_Call) Run(run func(chainID string)) *MockConfigReader_GetGatewayContractAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfigReader_GetGatewayContractAddress_Call) Return(_a0 string, _a1 error) *MockConfigReader_GetGatewayContractAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigReader_GetGatewayContractAddress_Call) RunAndReturn(run func(string) (string, error)) *MockConfigReader_GetGatewayContractAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetRPCEndpoint provides a mock function with given fields: chainID
func (_m *MockConfigReader) GetRPCEndpoint(chainID string) (string, error) {
	ret := _m.Called(chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetRPCEndpoint")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(chainID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(chainID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigReader_GetRPCEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRPCEndpoint'
type MockConfigReader_GetRPCEndpoint_Call struct {
	*mock.Call
}

// GetRPCEndpoint is a helper method to define mock.On call
//   - chainID string
func (_e *MockConfigReader_Expecter) GetRPCEndpoint(chainID interface{}) *MockConfigReader_GetRPCEndpoint_Call {
	return &MockConfigReader_GetRPCEndpoint_Call{Call: _e.mock.On("GetRPCEndpoint", chainID)}
}

func (_c *MockConfigReader_GetRPCEndpoint_Call) Run(run func(chainID string)) *MockConfigReader_GetRPCEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfigReader_GetRPCEndpoint_Call) Return(_a0 string, _a1 error) *MockConfigReader_GetRPCEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigReader_GetRPCEndpoint_Call) RunAndReturn(run func(string) (string, error)) *MockConfigReader_GetRPCEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// GetUSDCDenom provides a mock function with given fields: chainID
func (_m *MockConfigReader) GetUSDCDenom(chainID string) (string, error) {
	ret := _m.Called(chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetUSDCDenom")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(chainID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(chainID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigReader_GetUSDCDenom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUSDCDenom'
type MockConfigReader_GetUSDCDenom_Call struct {
	*mock.Call
}

// GetUSDCDenom is a helper method to define mock.On call
//   - chainID string
func (_e *MockConfigReader_Expecter) GetUSDCDenom(chainID interface{}) *MockConfigReader_GetUSDCDenom_Call {
	return &MockConfigReader_GetUSDCDenom_Call{Call: _e.mock.On("GetUSDCDenom", chainID)}
}

func (_c *MockConfigReader_GetUSDCDenom_Call) Run(run func(chainID string)) *MockConfigReader_GetUSDCDenom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfigReader_GetUSDCDenom_Call) Return(_a0 string, _a1 error) *MockConfigReader_GetUSDCDenom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigReader_GetUSDCDenom_Call) RunAndReturn(run func(string) (string, error)) *MockConfigReader_GetUSDCDenom_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigReader creates a new instance of MockConfigReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigReader {
	mock := &MockConfigReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
