// Code generated by mockery v2.46.3. DO NOT EDIT.

package evm

import (
	context "golang.org/x/net/context"

	mock "github.com/stretchr/testify/mock"

	signing "github.com/skip-mev/go-fast-solver/shared/signing"
)

// MockEVMTxExecutor is an autogenerated mock type for the EVMTxExecutor type
type MockEVMTxExecutor struct {
	mock.Mock
}

type MockEVMTxExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEVMTxExecutor) EXPECT() *MockEVMTxExecutor_Expecter {
	return &MockEVMTxExecutor_Expecter{mock: &_m.Mock}
}

// ExecuteTx provides a mock function with given fields: ctx, chainID, signerAddress, data, value, to, signer
func (_m *MockEVMTxExecutor) ExecuteTx(ctx context.Context, chainID string, signerAddress string, data []byte, value string, to string, signer signing.Signer) (string, error) {
	ret := _m.Called(ctx, chainID, signerAddress, data, value, to, signer)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTx")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, string, string, signing.Signer) (string, error)); ok {
		return rf(ctx, chainID, signerAddress, data, value, to, signer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, string, string, signing.Signer) string); ok {
		r0 = rf(ctx, chainID, signerAddress, data, value, to, signer)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte, string, string, signing.Signer) error); ok {
		r1 = rf(ctx, chainID, signerAddress, data, value, to, signer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEVMTxExecutor_ExecuteTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTx'
type MockEVMTxExecutor_ExecuteTx_Call struct {
	*mock.Call
}

// ExecuteTx is a helper method to define mock.On call
//   - ctx context.Context
//   - chainID string
//   - signerAddress string
//   - data []byte
//   - value string
//   - to string
//   - signer signing.Signer
func (_e *MockEVMTxExecutor_Expecter) ExecuteTx(ctx interface{}, chainID interface{}, signerAddress interface{}, data interface{}, value interface{}, to interface{}, signer interface{}) *MockEVMTxExecutor_ExecuteTx_Call {
	return &MockEVMTxExecutor_ExecuteTx_Call{Call: _e.mock.On("ExecuteTx", ctx, chainID, signerAddress, data, value, to, signer)}
}

func (_c *MockEVMTxExecutor_ExecuteTx_Call) Run(run func(ctx context.Context, chainID string, signerAddress string, data []byte, value string, to string, signer signing.Signer)) *MockEVMTxExecutor_ExecuteTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]byte), args[4].(string), args[5].(string), args[6].(signing.Signer))
	})
	return _c
}

func (_c *MockEVMTxExecutor_ExecuteTx_Call) Return(txHash string, err error) *MockEVMTxExecutor_ExecuteTx_Call {
	_c.Call.Return(txHash, err)
	return _c
}

func (_c *MockEVMTxExecutor_ExecuteTx_Call) RunAndReturn(run func(context.Context, string, string, []byte, string, string, signing.Signer) (string, error)) *MockEVMTxExecutor_ExecuteTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEVMTxExecutor creates a new instance of MockEVMTxExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEVMTxExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEVMTxExecutor {
	mock := &MockEVMTxExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
